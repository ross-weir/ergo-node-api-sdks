/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// Result of executeWithContext request (reduceToCrypto)
    /// </summary>
    [DataContract(Name = "CryptoResult")]
    public partial class CryptoResult : IEquatable<CryptoResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CryptoResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoResult" /> class.
        /// </summary>
        /// <param name="value">value (required).</param>
        /// <param name="cost">Estimated cost of contract execution (required).</param>
        public CryptoResult(SigmaBoolean value = default(SigmaBoolean), long cost = default(long))
        {
            // to ensure "value" is required (not null)
            if (value == null) {
                throw new ArgumentNullException("value is a required property for CryptoResult and cannot be null");
            }
            this.Value = value;
            this.Cost = cost;
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public SigmaBoolean Value { get; set; }

        /// <summary>
        /// Estimated cost of contract execution
        /// </summary>
        /// <value>Estimated cost of contract execution</value>
        [DataMember(Name = "cost", IsRequired = true, EmitDefaultValue = false)]
        public long Cost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CryptoResult {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptoResult);
        }

        /// <summary>
        /// Returns true if CryptoResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptoResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptoResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Cost == input.Cost ||
                    this.Cost.Equals(input.Cost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.Cost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
