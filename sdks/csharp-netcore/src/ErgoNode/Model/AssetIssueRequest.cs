/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// Request for generation of asset issue transaction
    /// </summary>
    [DataContract(Name = "AssetIssueRequest")]
    public partial class AssetIssueRequest : IEquatable<AssetIssueRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetIssueRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetIssueRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetIssueRequest" /> class.
        /// </summary>
        /// <param name="address">Encoded Ergo Address.</param>
        /// <param name="ergValue">Optional, amount of ergs to be put into box with issued assets.</param>
        /// <param name="amount">Supply amount (required).</param>
        /// <param name="name">Assets name (required).</param>
        /// <param name="description">Assets description (required).</param>
        /// <param name="decimals">Number of decimal places (required).</param>
        /// <param name="registers">Ergo box registers.</param>
        public AssetIssueRequest(string address = default(string), Int64 ergValue = default(Int64), long amount = default(long), string name = default(string), string description = default(string), int decimals = default(int), Dictionary<string, string> registers = default(Dictionary<string, string>))
        {
            this.Amount = amount;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for AssetIssueRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for AssetIssueRequest and cannot be null");
            }
            this.Description = description;
            this.Decimals = decimals;
            this.Address = address;
            this.ErgValue = ergValue;
            this.Registers = registers;
        }

        /// <summary>
        /// Encoded Ergo Address
        /// </summary>
        /// <value>Encoded Ergo Address</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Optional, amount of ergs to be put into box with issued assets
        /// </summary>
        /// <value>Optional, amount of ergs to be put into box with issued assets</value>
        [DataMember(Name = "ergValue", EmitDefaultValue = false)]
        public Int64 ErgValue { get; set; }

        /// <summary>
        /// Supply amount
        /// </summary>
        /// <value>Supply amount</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public long Amount { get; set; }

        /// <summary>
        /// Assets name
        /// </summary>
        /// <value>Assets name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Assets description
        /// </summary>
        /// <value>Assets description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Number of decimal places
        /// </summary>
        /// <value>Number of decimal places</value>
        [DataMember(Name = "decimals", IsRequired = true, EmitDefaultValue = false)]
        public int Decimals { get; set; }

        /// <summary>
        /// Ergo box registers
        /// </summary>
        /// <value>Ergo box registers</value>
        [DataMember(Name = "registers", EmitDefaultValue = false)]
        public Dictionary<string, string> Registers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetIssueRequest {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ErgValue: ").Append(ErgValue).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  Registers: ").Append(Registers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetIssueRequest);
        }

        /// <summary>
        /// Returns true if AssetIssueRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetIssueRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetIssueRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ErgValue == input.ErgValue ||
                    (this.ErgValue != null &&
                    this.ErgValue.Equals(input.ErgValue))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Decimals == input.Decimals ||
                    this.Decimals.Equals(input.Decimals)
                ) && 
                (
                    this.Registers == input.Registers ||
                    this.Registers != null &&
                    input.Registers != null &&
                    this.Registers.SequenceEqual(input.Registers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.ErgValue != null)
                    hashCode = hashCode * 59 + this.ErgValue.GetHashCode();
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Decimals.GetHashCode();
                if (this.Registers != null)
                    hashCode = hashCode * 59 + this.Registers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
