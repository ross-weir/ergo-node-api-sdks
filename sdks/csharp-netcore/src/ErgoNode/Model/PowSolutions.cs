/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// An object containing all components of pow solution
    /// </summary>
    [DataContract(Name = "PowSolutions")]
    public partial class PowSolutions : IEquatable<PowSolutions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PowSolutions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PowSolutions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PowSolutions" /> class.
        /// </summary>
        /// <param name="pk">Base16-encoded public key (required).</param>
        /// <param name="w">w (required).</param>
        /// <param name="n">n (required).</param>
        /// <param name="d">d (required).</param>
        public PowSolutions(string pk = default(string), string w = default(string), string n = default(string), decimal d = default(decimal))
        {
            // to ensure "pk" is required (not null)
            if (pk == null) {
                throw new ArgumentNullException("pk is a required property for PowSolutions and cannot be null");
            }
            this.Pk = pk;
            // to ensure "w" is required (not null)
            if (w == null) {
                throw new ArgumentNullException("w is a required property for PowSolutions and cannot be null");
            }
            this.W = w;
            // to ensure "n" is required (not null)
            if (n == null) {
                throw new ArgumentNullException("n is a required property for PowSolutions and cannot be null");
            }
            this.N = n;
            this.D = d;
        }

        /// <summary>
        /// Base16-encoded public key
        /// </summary>
        /// <value>Base16-encoded public key</value>
        [DataMember(Name = "pk", IsRequired = true, EmitDefaultValue = false)]
        public string Pk { get; set; }

        /// <summary>
        /// Gets or Sets W
        /// </summary>
        [DataMember(Name = "w", IsRequired = true, EmitDefaultValue = false)]
        public string W { get; set; }

        /// <summary>
        /// Gets or Sets N
        /// </summary>
        [DataMember(Name = "n", IsRequired = true, EmitDefaultValue = false)]
        public string N { get; set; }

        /// <summary>
        /// Gets or Sets D
        /// </summary>
        [DataMember(Name = "d", IsRequired = true, EmitDefaultValue = false)]
        public decimal D { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PowSolutions {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  W: ").Append(W).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("  D: ").Append(D).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PowSolutions);
        }

        /// <summary>
        /// Returns true if PowSolutions instances are equal
        /// </summary>
        /// <param name="input">Instance of PowSolutions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PowSolutions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.W == input.W ||
                    (this.W != null &&
                    this.W.Equals(input.W))
                ) && 
                (
                    this.N == input.N ||
                    (this.N != null &&
                    this.N.Equals(input.N))
                ) && 
                (
                    this.D == input.D ||
                    this.D.Equals(input.D)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.W != null)
                    hashCode = hashCode * 59 + this.W.GetHashCode();
                if (this.N != null)
                    hashCode = hashCode * 59 + this.N.GetHashCode();
                hashCode = hashCode * 59 + this.D.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
