/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// Proof that a block corresponding to given header without PoW contains some transactions
    /// </summary>
    [DataContract(Name = "ProofOfUpcomingTransactions")]
    public partial class ProofOfUpcomingTransactions : IEquatable<ProofOfUpcomingTransactions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProofOfUpcomingTransactions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProofOfUpcomingTransactions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProofOfUpcomingTransactions" /> class.
        /// </summary>
        /// <param name="msgPreimage">Base16-encoded serialized header without Proof-of-Work (required).</param>
        /// <param name="txProofs">Merkle proofs of transactions included into blocks (not necessarily all the block transactions) (required).</param>
        public ProofOfUpcomingTransactions(string msgPreimage = default(string), List<MerkleProof> txProofs = default(List<MerkleProof>))
        {
            // to ensure "msgPreimage" is required (not null)
            if (msgPreimage == null) {
                throw new ArgumentNullException("msgPreimage is a required property for ProofOfUpcomingTransactions and cannot be null");
            }
            this.MsgPreimage = msgPreimage;
            // to ensure "txProofs" is required (not null)
            if (txProofs == null) {
                throw new ArgumentNullException("txProofs is a required property for ProofOfUpcomingTransactions and cannot be null");
            }
            this.TxProofs = txProofs;
        }

        /// <summary>
        /// Base16-encoded serialized header without Proof-of-Work
        /// </summary>
        /// <value>Base16-encoded serialized header without Proof-of-Work</value>
        [DataMember(Name = "msgPreimage", IsRequired = true, EmitDefaultValue = false)]
        public string MsgPreimage { get; set; }

        /// <summary>
        /// Merkle proofs of transactions included into blocks (not necessarily all the block transactions)
        /// </summary>
        /// <value>Merkle proofs of transactions included into blocks (not necessarily all the block transactions)</value>
        [DataMember(Name = "txProofs", IsRequired = true, EmitDefaultValue = false)]
        public List<MerkleProof> TxProofs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProofOfUpcomingTransactions {\n");
            sb.Append("  MsgPreimage: ").Append(MsgPreimage).Append("\n");
            sb.Append("  TxProofs: ").Append(TxProofs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProofOfUpcomingTransactions);
        }

        /// <summary>
        /// Returns true if ProofOfUpcomingTransactions instances are equal
        /// </summary>
        /// <param name="input">Instance of ProofOfUpcomingTransactions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProofOfUpcomingTransactions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MsgPreimage == input.MsgPreimage ||
                    (this.MsgPreimage != null &&
                    this.MsgPreimage.Equals(input.MsgPreimage))
                ) && 
                (
                    this.TxProofs == input.TxProofs ||
                    this.TxProofs != null &&
                    input.TxProofs != null &&
                    this.TxProofs.SequenceEqual(input.TxProofs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MsgPreimage != null)
                    hashCode = hashCode * 59 + this.MsgPreimage.GetHashCode();
                if (this.TxProofs != null)
                    hashCode = hashCode * 59 + this.TxProofs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
