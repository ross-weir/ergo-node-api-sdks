/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// PeersStatus
    /// </summary>
    [DataContract(Name = "PeersStatus")]
    public partial class PeersStatus : IEquatable<PeersStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeersStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PeersStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PeersStatus" /> class.
        /// </summary>
        /// <param name="lastIncomingMessage">lastIncomingMessage.</param>
        /// <param name="currentNetworkTime">currentNetworkTime (required).</param>
        public PeersStatus(long lastIncomingMessage = default(long), long currentNetworkTime = default(long))
        {
            this.CurrentNetworkTime = currentNetworkTime;
            this.LastIncomingMessage = lastIncomingMessage;
        }

        /// <summary>
        /// Gets or Sets LastIncomingMessage
        /// </summary>
        [DataMember(Name = "lastIncomingMessage", EmitDefaultValue = false)]
        public long LastIncomingMessage { get; set; }

        /// <summary>
        /// Gets or Sets CurrentNetworkTime
        /// </summary>
        [DataMember(Name = "currentNetworkTime", IsRequired = true, EmitDefaultValue = false)]
        public long CurrentNetworkTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PeersStatus {\n");
            sb.Append("  LastIncomingMessage: ").Append(LastIncomingMessage).Append("\n");
            sb.Append("  CurrentNetworkTime: ").Append(CurrentNetworkTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeersStatus);
        }

        /// <summary>
        /// Returns true if PeersStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of PeersStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeersStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastIncomingMessage == input.LastIncomingMessage ||
                    this.LastIncomingMessage.Equals(input.LastIncomingMessage)
                ) && 
                (
                    this.CurrentNetworkTime == input.CurrentNetworkTime ||
                    this.CurrentNetworkTime.Equals(input.CurrentNetworkTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.LastIncomingMessage.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentNetworkTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
