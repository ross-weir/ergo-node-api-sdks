/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// Block header format used for sigma ErgoLikeContext
    /// </summary>
    [DataContract(Name = "SigmaHeader")]
    public partial class SigmaHeader : IEquatable<SigmaHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SigmaHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SigmaHeader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SigmaHeader" /> class.
        /// </summary>
        /// <param name="id">Base16-encoded 32 byte modifier id.</param>
        /// <param name="timestamp">Basic timestamp definition (required).</param>
        /// <param name="version">Ergo blockchain protocol version (required).</param>
        /// <param name="adProofsRoot">Base16-encoded 32 byte digest (required).</param>
        /// <param name="adProofsId">Base16-encoded 32 byte modifier id.</param>
        /// <param name="stateRoot">stateRoot (required).</param>
        /// <param name="transactionsRoot">Base16-encoded 32 byte digest (required).</param>
        /// <param name="transactionsId">Base16-encoded 32 byte modifier id.</param>
        /// <param name="nBits">nBits (required).</param>
        /// <param name="extensionHash">Base16-encoded 32 byte digest (required).</param>
        /// <param name="extensionRoot">Base16-encoded 32 byte digest.</param>
        /// <param name="extensionId">Base16-encoded 32 byte modifier id.</param>
        /// <param name="height">height (required).</param>
        /// <param name="size">size.</param>
        /// <param name="parentId">Base16-encoded 32 byte modifier id (required).</param>
        /// <param name="powSolutions">powSolutions.</param>
        /// <param name="votes">Base16-encoded votes for a soft-fork and parameters (required).</param>
        /// <param name="minerPk">minerPk.</param>
        /// <param name="powOnetimePk">powOnetimePk.</param>
        /// <param name="powNonce">Base16-encoded 32 byte digest.</param>
        /// <param name="powDistance">sigma.BigInt.</param>
        public SigmaHeader(string id = default(string), long timestamp = default(long), int version = default(int), string adProofsRoot = default(string), string adProofsId = default(string), AvlTreeData stateRoot = default(AvlTreeData), string transactionsRoot = default(string), string transactionsId = default(string), long nBits = default(long), string extensionHash = default(string), string extensionRoot = default(string), string extensionId = default(string), int height = default(int), int size = default(int), string parentId = default(string), PowSolutions powSolutions = default(PowSolutions), string votes = default(string), string minerPk = default(string), string powOnetimePk = default(string), string powNonce = default(string), decimal powDistance = default(decimal))
        {
            this.Timestamp = timestamp;
            this._Version = version;
            // to ensure "adProofsRoot" is required (not null)
            if (adProofsRoot == null) {
                throw new ArgumentNullException("adProofsRoot is a required property for SigmaHeader and cannot be null");
            }
            this.AdProofsRoot = adProofsRoot;
            // to ensure "stateRoot" is required (not null)
            if (stateRoot == null) {
                throw new ArgumentNullException("stateRoot is a required property for SigmaHeader and cannot be null");
            }
            this.StateRoot = stateRoot;
            // to ensure "transactionsRoot" is required (not null)
            if (transactionsRoot == null) {
                throw new ArgumentNullException("transactionsRoot is a required property for SigmaHeader and cannot be null");
            }
            this.TransactionsRoot = transactionsRoot;
            this.NBits = nBits;
            // to ensure "extensionHash" is required (not null)
            if (extensionHash == null) {
                throw new ArgumentNullException("extensionHash is a required property for SigmaHeader and cannot be null");
            }
            this.ExtensionHash = extensionHash;
            this.Height = height;
            // to ensure "parentId" is required (not null)
            if (parentId == null) {
                throw new ArgumentNullException("parentId is a required property for SigmaHeader and cannot be null");
            }
            this.ParentId = parentId;
            // to ensure "votes" is required (not null)
            if (votes == null) {
                throw new ArgumentNullException("votes is a required property for SigmaHeader and cannot be null");
            }
            this.Votes = votes;
            this.Id = id;
            this.AdProofsId = adProofsId;
            this.TransactionsId = transactionsId;
            this.ExtensionRoot = extensionRoot;
            this.ExtensionId = extensionId;
            this.Size = size;
            this.PowSolutions = powSolutions;
            this.MinerPk = minerPk;
            this.PowOnetimePk = powOnetimePk;
            this.PowNonce = powNonce;
            this.PowDistance = powDistance;
        }

        /// <summary>
        /// Base16-encoded 32 byte modifier id
        /// </summary>
        /// <value>Base16-encoded 32 byte modifier id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Basic timestamp definition
        /// </summary>
        /// <value>Basic timestamp definition</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = false)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Ergo blockchain protocol version
        /// </summary>
        /// <value>Ergo blockchain protocol version</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public int _Version { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte digest
        /// </summary>
        /// <value>Base16-encoded 32 byte digest</value>
        [DataMember(Name = "adProofsRoot", IsRequired = true, EmitDefaultValue = false)]
        public string AdProofsRoot { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte modifier id
        /// </summary>
        /// <value>Base16-encoded 32 byte modifier id</value>
        [DataMember(Name = "adProofsId", EmitDefaultValue = false)]
        public string AdProofsId { get; set; }

        /// <summary>
        /// Gets or Sets StateRoot
        /// </summary>
        [DataMember(Name = "stateRoot", IsRequired = true, EmitDefaultValue = false)]
        public AvlTreeData StateRoot { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte digest
        /// </summary>
        /// <value>Base16-encoded 32 byte digest</value>
        [DataMember(Name = "transactionsRoot", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionsRoot { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte modifier id
        /// </summary>
        /// <value>Base16-encoded 32 byte modifier id</value>
        [DataMember(Name = "transactionsId", EmitDefaultValue = false)]
        public string TransactionsId { get; set; }

        /// <summary>
        /// Gets or Sets NBits
        /// </summary>
        [DataMember(Name = "nBits", IsRequired = true, EmitDefaultValue = false)]
        public long NBits { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte digest
        /// </summary>
        /// <value>Base16-encoded 32 byte digest</value>
        [DataMember(Name = "extensionHash", IsRequired = true, EmitDefaultValue = false)]
        public string ExtensionHash { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte digest
        /// </summary>
        /// <value>Base16-encoded 32 byte digest</value>
        [DataMember(Name = "extensionRoot", EmitDefaultValue = false)]
        public string ExtensionRoot { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte modifier id
        /// </summary>
        /// <value>Base16-encoded 32 byte modifier id</value>
        [DataMember(Name = "extensionId", EmitDefaultValue = false)]
        public string ExtensionId { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte modifier id
        /// </summary>
        /// <value>Base16-encoded 32 byte modifier id</value>
        [DataMember(Name = "parentId", IsRequired = true, EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets PowSolutions
        /// </summary>
        [DataMember(Name = "powSolutions", EmitDefaultValue = false)]
        public PowSolutions PowSolutions { get; set; }

        /// <summary>
        /// Base16-encoded votes for a soft-fork and parameters
        /// </summary>
        /// <value>Base16-encoded votes for a soft-fork and parameters</value>
        [DataMember(Name = "votes", IsRequired = true, EmitDefaultValue = false)]
        public string Votes { get; set; }

        /// <summary>
        /// Gets or Sets MinerPk
        /// </summary>
        [DataMember(Name = "minerPk", EmitDefaultValue = false)]
        public string MinerPk { get; set; }

        /// <summary>
        /// Gets or Sets PowOnetimePk
        /// </summary>
        [DataMember(Name = "powOnetimePk", EmitDefaultValue = false)]
        public string PowOnetimePk { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte digest
        /// </summary>
        /// <value>Base16-encoded 32 byte digest</value>
        [DataMember(Name = "powNonce", EmitDefaultValue = false)]
        public string PowNonce { get; set; }

        /// <summary>
        /// sigma.BigInt
        /// </summary>
        /// <value>sigma.BigInt</value>
        [DataMember(Name = "powDistance", EmitDefaultValue = false)]
        public decimal PowDistance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SigmaHeader {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  AdProofsRoot: ").Append(AdProofsRoot).Append("\n");
            sb.Append("  AdProofsId: ").Append(AdProofsId).Append("\n");
            sb.Append("  StateRoot: ").Append(StateRoot).Append("\n");
            sb.Append("  TransactionsRoot: ").Append(TransactionsRoot).Append("\n");
            sb.Append("  TransactionsId: ").Append(TransactionsId).Append("\n");
            sb.Append("  NBits: ").Append(NBits).Append("\n");
            sb.Append("  ExtensionHash: ").Append(ExtensionHash).Append("\n");
            sb.Append("  ExtensionRoot: ").Append(ExtensionRoot).Append("\n");
            sb.Append("  ExtensionId: ").Append(ExtensionId).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  PowSolutions: ").Append(PowSolutions).Append("\n");
            sb.Append("  Votes: ").Append(Votes).Append("\n");
            sb.Append("  MinerPk: ").Append(MinerPk).Append("\n");
            sb.Append("  PowOnetimePk: ").Append(PowOnetimePk).Append("\n");
            sb.Append("  PowNonce: ").Append(PowNonce).Append("\n");
            sb.Append("  PowDistance: ").Append(PowDistance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SigmaHeader);
        }

        /// <summary>
        /// Returns true if SigmaHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of SigmaHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SigmaHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.AdProofsRoot == input.AdProofsRoot ||
                    (this.AdProofsRoot != null &&
                    this.AdProofsRoot.Equals(input.AdProofsRoot))
                ) && 
                (
                    this.AdProofsId == input.AdProofsId ||
                    (this.AdProofsId != null &&
                    this.AdProofsId.Equals(input.AdProofsId))
                ) && 
                (
                    this.StateRoot == input.StateRoot ||
                    (this.StateRoot != null &&
                    this.StateRoot.Equals(input.StateRoot))
                ) && 
                (
                    this.TransactionsRoot == input.TransactionsRoot ||
                    (this.TransactionsRoot != null &&
                    this.TransactionsRoot.Equals(input.TransactionsRoot))
                ) && 
                (
                    this.TransactionsId == input.TransactionsId ||
                    (this.TransactionsId != null &&
                    this.TransactionsId.Equals(input.TransactionsId))
                ) && 
                (
                    this.NBits == input.NBits ||
                    this.NBits.Equals(input.NBits)
                ) && 
                (
                    this.ExtensionHash == input.ExtensionHash ||
                    (this.ExtensionHash != null &&
                    this.ExtensionHash.Equals(input.ExtensionHash))
                ) && 
                (
                    this.ExtensionRoot == input.ExtensionRoot ||
                    (this.ExtensionRoot != null &&
                    this.ExtensionRoot.Equals(input.ExtensionRoot))
                ) && 
                (
                    this.ExtensionId == input.ExtensionId ||
                    (this.ExtensionId != null &&
                    this.ExtensionId.Equals(input.ExtensionId))
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.PowSolutions == input.PowSolutions ||
                    (this.PowSolutions != null &&
                    this.PowSolutions.Equals(input.PowSolutions))
                ) && 
                (
                    this.Votes == input.Votes ||
                    (this.Votes != null &&
                    this.Votes.Equals(input.Votes))
                ) && 
                (
                    this.MinerPk == input.MinerPk ||
                    (this.MinerPk != null &&
                    this.MinerPk.Equals(input.MinerPk))
                ) && 
                (
                    this.PowOnetimePk == input.PowOnetimePk ||
                    (this.PowOnetimePk != null &&
                    this.PowOnetimePk.Equals(input.PowOnetimePk))
                ) && 
                (
                    this.PowNonce == input.PowNonce ||
                    (this.PowNonce != null &&
                    this.PowNonce.Equals(input.PowNonce))
                ) && 
                (
                    this.PowDistance == input.PowDistance ||
                    this.PowDistance.Equals(input.PowDistance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.AdProofsRoot != null)
                    hashCode = hashCode * 59 + this.AdProofsRoot.GetHashCode();
                if (this.AdProofsId != null)
                    hashCode = hashCode * 59 + this.AdProofsId.GetHashCode();
                if (this.StateRoot != null)
                    hashCode = hashCode * 59 + this.StateRoot.GetHashCode();
                if (this.TransactionsRoot != null)
                    hashCode = hashCode * 59 + this.TransactionsRoot.GetHashCode();
                if (this.TransactionsId != null)
                    hashCode = hashCode * 59 + this.TransactionsId.GetHashCode();
                hashCode = hashCode * 59 + this.NBits.GetHashCode();
                if (this.ExtensionHash != null)
                    hashCode = hashCode * 59 + this.ExtensionHash.GetHashCode();
                if (this.ExtensionRoot != null)
                    hashCode = hashCode * 59 + this.ExtensionRoot.GetHashCode();
                if (this.ExtensionId != null)
                    hashCode = hashCode * 59 + this.ExtensionId.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.PowSolutions != null)
                    hashCode = hashCode * 59 + this.PowSolutions.GetHashCode();
                if (this.Votes != null)
                    hashCode = hashCode * 59 + this.Votes.GetHashCode();
                if (this.MinerPk != null)
                    hashCode = hashCode * 59 + this.MinerPk.GetHashCode();
                if (this.PowOnetimePk != null)
                    hashCode = hashCode * 59 + this.PowOnetimePk.GetHashCode();
                if (this.PowNonce != null)
                    hashCode = hashCode * 59 + this.PowNonce.GetHashCode();
                hashCode = hashCode * 59 + this.PowDistance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // NBits (long) minimum
            if(this.NBits < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NBits, must be a value greater than or equal to 0.", new [] { "NBits" });
            }

            // Height (int) minimum
            if(this.Height < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value greater than or equal to 0.", new [] { "Height" });
            }

            // Size (int) minimum
            if(this.Size < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Size, must be a value greater than or equal to 0.", new [] { "Size" });
            }

            yield break;
        }
    }

}
