/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// Block candidate related data for external miner to perform work
    /// </summary>
    [DataContract(Name = "WorkMessage")]
    public partial class WorkMessage : IEquatable<WorkMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkMessage" /> class.
        /// </summary>
        /// <param name="msg">Base16-encoded block header bytes without PoW solution (required).</param>
        /// <param name="b">Work target value (required).</param>
        /// <param name="pk">Base16-encoded miner public key (required).</param>
        /// <param name="proof">proof.</param>
        public WorkMessage(string msg = default(string), int b = default(int), string pk = default(string), ProofOfUpcomingTransactions proof = default(ProofOfUpcomingTransactions))
        {
            // to ensure "msg" is required (not null)
            if (msg == null) {
                throw new ArgumentNullException("msg is a required property for WorkMessage and cannot be null");
            }
            this.Msg = msg;
            this.B = b;
            // to ensure "pk" is required (not null)
            if (pk == null) {
                throw new ArgumentNullException("pk is a required property for WorkMessage and cannot be null");
            }
            this.Pk = pk;
            this.Proof = proof;
        }

        /// <summary>
        /// Base16-encoded block header bytes without PoW solution
        /// </summary>
        /// <value>Base16-encoded block header bytes without PoW solution</value>
        [DataMember(Name = "msg", IsRequired = true, EmitDefaultValue = false)]
        public string Msg { get; set; }

        /// <summary>
        /// Work target value
        /// </summary>
        /// <value>Work target value</value>
        [DataMember(Name = "b", IsRequired = true, EmitDefaultValue = false)]
        public int B { get; set; }

        /// <summary>
        /// Base16-encoded miner public key
        /// </summary>
        /// <value>Base16-encoded miner public key</value>
        [DataMember(Name = "pk", IsRequired = true, EmitDefaultValue = false)]
        public string Pk { get; set; }

        /// <summary>
        /// Gets or Sets Proof
        /// </summary>
        [DataMember(Name = "proof", EmitDefaultValue = false)]
        public ProofOfUpcomingTransactions Proof { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkMessage {\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  B: ").Append(B).Append("\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  Proof: ").Append(Proof).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkMessage);
        }

        /// <summary>
        /// Returns true if WorkMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Msg == input.Msg ||
                    (this.Msg != null &&
                    this.Msg.Equals(input.Msg))
                ) && 
                (
                    this.B == input.B ||
                    this.B.Equals(input.B)
                ) && 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.Proof == input.Proof ||
                    (this.Proof != null &&
                    this.Proof.Equals(input.Proof))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Msg != null)
                    hashCode = hashCode * 59 + this.Msg.GetHashCode();
                hashCode = hashCode * 59 + this.B.GetHashCode();
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.Proof != null)
                    hashCode = hashCode * 59 + this.Proof.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
