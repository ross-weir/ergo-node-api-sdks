/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// AvlTreeData
    /// </summary>
    [DataContract(Name = "AvlTreeData")]
    public partial class AvlTreeData : IEquatable<AvlTreeData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvlTreeData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AvlTreeData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvlTreeData" /> class.
        /// </summary>
        /// <param name="digest">Base16-encoded 32 byte digest (required).</param>
        /// <param name="treeFlags">treeFlags.</param>
        /// <param name="keyLength">keyLength.</param>
        /// <param name="valueLength">valueLength.</param>
        public AvlTreeData(string digest = default(string), int treeFlags = default(int), int keyLength = default(int), int? valueLength = default(int?))
        {
            // to ensure "digest" is required (not null)
            if (digest == null) {
                throw new ArgumentNullException("digest is a required property for AvlTreeData and cannot be null");
            }
            this.Digest = digest;
            this.TreeFlags = treeFlags;
            this.KeyLength = keyLength;
            this.ValueLength = valueLength;
        }

        /// <summary>
        /// Base16-encoded 32 byte digest
        /// </summary>
        /// <value>Base16-encoded 32 byte digest</value>
        [DataMember(Name = "digest", IsRequired = true, EmitDefaultValue = false)]
        public string Digest { get; set; }

        /// <summary>
        /// Gets or Sets TreeFlags
        /// </summary>
        [DataMember(Name = "treeFlags", EmitDefaultValue = false)]
        public int TreeFlags { get; set; }

        /// <summary>
        /// Gets or Sets KeyLength
        /// </summary>
        [DataMember(Name = "keyLength", EmitDefaultValue = false)]
        public int KeyLength { get; set; }

        /// <summary>
        /// Gets or Sets ValueLength
        /// </summary>
        [DataMember(Name = "valueLength", EmitDefaultValue = true)]
        public int? ValueLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvlTreeData {\n");
            sb.Append("  Digest: ").Append(Digest).Append("\n");
            sb.Append("  TreeFlags: ").Append(TreeFlags).Append("\n");
            sb.Append("  KeyLength: ").Append(KeyLength).Append("\n");
            sb.Append("  ValueLength: ").Append(ValueLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvlTreeData);
        }

        /// <summary>
        /// Returns true if AvlTreeData instances are equal
        /// </summary>
        /// <param name="input">Instance of AvlTreeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvlTreeData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Digest == input.Digest ||
                    (this.Digest != null &&
                    this.Digest.Equals(input.Digest))
                ) && 
                (
                    this.TreeFlags == input.TreeFlags ||
                    this.TreeFlags.Equals(input.TreeFlags)
                ) && 
                (
                    this.KeyLength == input.KeyLength ||
                    this.KeyLength.Equals(input.KeyLength)
                ) && 
                (
                    this.ValueLength == input.ValueLength ||
                    (this.ValueLength != null &&
                    this.ValueLength.Equals(input.ValueLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Digest != null)
                    hashCode = hashCode * 59 + this.Digest.GetHashCode();
                hashCode = hashCode * 59 + this.TreeFlags.GetHashCode();
                hashCode = hashCode * 59 + this.KeyLength.GetHashCode();
                if (this.ValueLength != null)
                    hashCode = hashCode * 59 + this.ValueLength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
