/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// ErgoLikeContext
    /// </summary>
    [DataContract(Name = "ErgoLikeContext")]
    public partial class ErgoLikeContext : IEquatable<ErgoLikeContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErgoLikeContext" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ErgoLikeContext() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErgoLikeContext" /> class.
        /// </summary>
        /// <param name="lastBlockUtxoRoot">lastBlockUtxoRoot (required).</param>
        /// <param name="headers">fixed number of last block headers in descending order (first header is the newest one) (required).</param>
        /// <param name="preHeader">preHeader (required).</param>
        /// <param name="dataBoxes">boxes, that corresponds to id&#39;s of &#x60;spendingTransaction.dataInputs&#x60; (required).</param>
        /// <param name="boxesToSpend">boxes, that corresponds to id&#39;s of &#x60;spendingTransaction.inputs&#x60; (required).</param>
        /// <param name="spendingTransaction">spendingTransaction (required).</param>
        /// <param name="selfIndex">index of the box in &#x60;boxesToSpend&#x60; that contains the script we&#39;re evaluating (required).</param>
        /// <param name="extension">prover-defined key-value pairs, that may be used inside a script (required).</param>
        /// <param name="validationSettings">validation parameters passed to Interpreter.verify to detect soft-fork conditions (required).</param>
        /// <param name="costLimit">hard limit on accumulated execution cost, if exceeded lead to CostLimitException to be thrown (required).</param>
        /// <param name="initCost">initial value of execution cost already accumulated before Interpreter.verify is called (required).</param>
        public ErgoLikeContext(AvlTreeData lastBlockUtxoRoot = default(AvlTreeData), List<SigmaHeader> headers = default(List<SigmaHeader>), PreHeader preHeader = default(PreHeader), List<ErgoTransactionOutput> dataBoxes = default(List<ErgoTransactionOutput>), List<ErgoTransactionOutput> boxesToSpend = default(List<ErgoTransactionOutput>), ErgoLikeTransaction spendingTransaction = default(ErgoLikeTransaction), long selfIndex = default(long), Object extension = default(Object), string validationSettings = default(string), long costLimit = default(long), long initCost = default(long))
        {
            // to ensure "lastBlockUtxoRoot" is required (not null)
            if (lastBlockUtxoRoot == null) {
                throw new ArgumentNullException("lastBlockUtxoRoot is a required property for ErgoLikeContext and cannot be null");
            }
            this.LastBlockUtxoRoot = lastBlockUtxoRoot;
            // to ensure "headers" is required (not null)
            if (headers == null) {
                throw new ArgumentNullException("headers is a required property for ErgoLikeContext and cannot be null");
            }
            this.Headers = headers;
            // to ensure "preHeader" is required (not null)
            if (preHeader == null) {
                throw new ArgumentNullException("preHeader is a required property for ErgoLikeContext and cannot be null");
            }
            this.PreHeader = preHeader;
            // to ensure "dataBoxes" is required (not null)
            if (dataBoxes == null) {
                throw new ArgumentNullException("dataBoxes is a required property for ErgoLikeContext and cannot be null");
            }
            this.DataBoxes = dataBoxes;
            // to ensure "boxesToSpend" is required (not null)
            if (boxesToSpend == null) {
                throw new ArgumentNullException("boxesToSpend is a required property for ErgoLikeContext and cannot be null");
            }
            this.BoxesToSpend = boxesToSpend;
            // to ensure "spendingTransaction" is required (not null)
            if (spendingTransaction == null) {
                throw new ArgumentNullException("spendingTransaction is a required property for ErgoLikeContext and cannot be null");
            }
            this.SpendingTransaction = spendingTransaction;
            this.SelfIndex = selfIndex;
            // to ensure "extension" is required (not null)
            if (extension == null) {
                throw new ArgumentNullException("extension is a required property for ErgoLikeContext and cannot be null");
            }
            this.Extension = extension;
            // to ensure "validationSettings" is required (not null)
            if (validationSettings == null) {
                throw new ArgumentNullException("validationSettings is a required property for ErgoLikeContext and cannot be null");
            }
            this.ValidationSettings = validationSettings;
            this.CostLimit = costLimit;
            this.InitCost = initCost;
        }

        /// <summary>
        /// Gets or Sets LastBlockUtxoRoot
        /// </summary>
        [DataMember(Name = "lastBlockUtxoRoot", IsRequired = true, EmitDefaultValue = false)]
        public AvlTreeData LastBlockUtxoRoot { get; set; }

        /// <summary>
        /// fixed number of last block headers in descending order (first header is the newest one)
        /// </summary>
        /// <value>fixed number of last block headers in descending order (first header is the newest one)</value>
        [DataMember(Name = "headers", IsRequired = true, EmitDefaultValue = false)]
        public List<SigmaHeader> Headers { get; set; }

        /// <summary>
        /// Gets or Sets PreHeader
        /// </summary>
        [DataMember(Name = "preHeader", IsRequired = true, EmitDefaultValue = false)]
        public PreHeader PreHeader { get; set; }

        /// <summary>
        /// boxes, that corresponds to id&#39;s of &#x60;spendingTransaction.dataInputs&#x60;
        /// </summary>
        /// <value>boxes, that corresponds to id&#39;s of &#x60;spendingTransaction.dataInputs&#x60;</value>
        [DataMember(Name = "dataBoxes", IsRequired = true, EmitDefaultValue = false)]
        public List<ErgoTransactionOutput> DataBoxes { get; set; }

        /// <summary>
        /// boxes, that corresponds to id&#39;s of &#x60;spendingTransaction.inputs&#x60;
        /// </summary>
        /// <value>boxes, that corresponds to id&#39;s of &#x60;spendingTransaction.inputs&#x60;</value>
        [DataMember(Name = "boxesToSpend", IsRequired = true, EmitDefaultValue = false)]
        public List<ErgoTransactionOutput> BoxesToSpend { get; set; }

        /// <summary>
        /// Gets or Sets SpendingTransaction
        /// </summary>
        [DataMember(Name = "spendingTransaction", IsRequired = true, EmitDefaultValue = false)]
        public ErgoLikeTransaction SpendingTransaction { get; set; }

        /// <summary>
        /// index of the box in &#x60;boxesToSpend&#x60; that contains the script we&#39;re evaluating
        /// </summary>
        /// <value>index of the box in &#x60;boxesToSpend&#x60; that contains the script we&#39;re evaluating</value>
        [DataMember(Name = "selfIndex", IsRequired = true, EmitDefaultValue = false)]
        public long SelfIndex { get; set; }

        /// <summary>
        /// prover-defined key-value pairs, that may be used inside a script
        /// </summary>
        /// <value>prover-defined key-value pairs, that may be used inside a script</value>
        [DataMember(Name = "extension", IsRequired = true, EmitDefaultValue = false)]
        public Object Extension { get; set; }

        /// <summary>
        /// validation parameters passed to Interpreter.verify to detect soft-fork conditions
        /// </summary>
        /// <value>validation parameters passed to Interpreter.verify to detect soft-fork conditions</value>
        [DataMember(Name = "validationSettings", IsRequired = true, EmitDefaultValue = false)]
        public string ValidationSettings { get; set; }

        /// <summary>
        /// hard limit on accumulated execution cost, if exceeded lead to CostLimitException to be thrown
        /// </summary>
        /// <value>hard limit on accumulated execution cost, if exceeded lead to CostLimitException to be thrown</value>
        [DataMember(Name = "costLimit", IsRequired = true, EmitDefaultValue = false)]
        public long CostLimit { get; set; }

        /// <summary>
        /// initial value of execution cost already accumulated before Interpreter.verify is called
        /// </summary>
        /// <value>initial value of execution cost already accumulated before Interpreter.verify is called</value>
        [DataMember(Name = "initCost", IsRequired = true, EmitDefaultValue = false)]
        public long InitCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErgoLikeContext {\n");
            sb.Append("  LastBlockUtxoRoot: ").Append(LastBlockUtxoRoot).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  PreHeader: ").Append(PreHeader).Append("\n");
            sb.Append("  DataBoxes: ").Append(DataBoxes).Append("\n");
            sb.Append("  BoxesToSpend: ").Append(BoxesToSpend).Append("\n");
            sb.Append("  SpendingTransaction: ").Append(SpendingTransaction).Append("\n");
            sb.Append("  SelfIndex: ").Append(SelfIndex).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  ValidationSettings: ").Append(ValidationSettings).Append("\n");
            sb.Append("  CostLimit: ").Append(CostLimit).Append("\n");
            sb.Append("  InitCost: ").Append(InitCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErgoLikeContext);
        }

        /// <summary>
        /// Returns true if ErgoLikeContext instances are equal
        /// </summary>
        /// <param name="input">Instance of ErgoLikeContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErgoLikeContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastBlockUtxoRoot == input.LastBlockUtxoRoot ||
                    (this.LastBlockUtxoRoot != null &&
                    this.LastBlockUtxoRoot.Equals(input.LastBlockUtxoRoot))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.PreHeader == input.PreHeader ||
                    (this.PreHeader != null &&
                    this.PreHeader.Equals(input.PreHeader))
                ) && 
                (
                    this.DataBoxes == input.DataBoxes ||
                    this.DataBoxes != null &&
                    input.DataBoxes != null &&
                    this.DataBoxes.SequenceEqual(input.DataBoxes)
                ) && 
                (
                    this.BoxesToSpend == input.BoxesToSpend ||
                    this.BoxesToSpend != null &&
                    input.BoxesToSpend != null &&
                    this.BoxesToSpend.SequenceEqual(input.BoxesToSpend)
                ) && 
                (
                    this.SpendingTransaction == input.SpendingTransaction ||
                    (this.SpendingTransaction != null &&
                    this.SpendingTransaction.Equals(input.SpendingTransaction))
                ) && 
                (
                    this.SelfIndex == input.SelfIndex ||
                    this.SelfIndex.Equals(input.SelfIndex)
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.ValidationSettings == input.ValidationSettings ||
                    (this.ValidationSettings != null &&
                    this.ValidationSettings.Equals(input.ValidationSettings))
                ) && 
                (
                    this.CostLimit == input.CostLimit ||
                    this.CostLimit.Equals(input.CostLimit)
                ) && 
                (
                    this.InitCost == input.InitCost ||
                    this.InitCost.Equals(input.InitCost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastBlockUtxoRoot != null)
                    hashCode = hashCode * 59 + this.LastBlockUtxoRoot.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.PreHeader != null)
                    hashCode = hashCode * 59 + this.PreHeader.GetHashCode();
                if (this.DataBoxes != null)
                    hashCode = hashCode * 59 + this.DataBoxes.GetHashCode();
                if (this.BoxesToSpend != null)
                    hashCode = hashCode * 59 + this.BoxesToSpend.GetHashCode();
                if (this.SpendingTransaction != null)
                    hashCode = hashCode * 59 + this.SpendingTransaction.GetHashCode();
                hashCode = hashCode * 59 + this.SelfIndex.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.ValidationSettings != null)
                    hashCode = hashCode * 59 + this.ValidationSettings.GetHashCode();
                hashCode = hashCode * 59 + this.CostLimit.GetHashCode();
                hashCode = hashCode * 59 + this.InitCost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
