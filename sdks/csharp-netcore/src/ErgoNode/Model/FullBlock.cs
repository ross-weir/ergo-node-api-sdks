/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// Block with header and transactions
    /// </summary>
    [DataContract(Name = "FullBlock")]
    public partial class FullBlock : IEquatable<FullBlock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FullBlock" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FullBlock() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FullBlock" /> class.
        /// </summary>
        /// <param name="header">header (required).</param>
        /// <param name="blockTransactions">blockTransactions (required).</param>
        /// <param name="adProofs">adProofs (required).</param>
        /// <param name="extension">extension (required).</param>
        /// <param name="size">Size in bytes (required).</param>
        public FullBlock(BlockHeader header = default(BlockHeader), BlockTransactions blockTransactions = default(BlockTransactions), BlockADProofs adProofs = default(BlockADProofs), Extension extension = default(Extension), int size = default(int))
        {
            // to ensure "header" is required (not null)
            if (header == null) {
                throw new ArgumentNullException("header is a required property for FullBlock and cannot be null");
            }
            this.Header = header;
            // to ensure "blockTransactions" is required (not null)
            if (blockTransactions == null) {
                throw new ArgumentNullException("blockTransactions is a required property for FullBlock and cannot be null");
            }
            this.BlockTransactions = blockTransactions;
            // to ensure "adProofs" is required (not null)
            if (adProofs == null) {
                throw new ArgumentNullException("adProofs is a required property for FullBlock and cannot be null");
            }
            this.AdProofs = adProofs;
            // to ensure "extension" is required (not null)
            if (extension == null) {
                throw new ArgumentNullException("extension is a required property for FullBlock and cannot be null");
            }
            this.Extension = extension;
            this.Size = size;
        }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "header", IsRequired = true, EmitDefaultValue = false)]
        public BlockHeader Header { get; set; }

        /// <summary>
        /// Gets or Sets BlockTransactions
        /// </summary>
        [DataMember(Name = "blockTransactions", IsRequired = true, EmitDefaultValue = false)]
        public BlockTransactions BlockTransactions { get; set; }

        /// <summary>
        /// Gets or Sets AdProofs
        /// </summary>
        [DataMember(Name = "adProofs", IsRequired = true, EmitDefaultValue = false)]
        public BlockADProofs AdProofs { get; set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name = "extension", IsRequired = true, EmitDefaultValue = false)]
        public Extension Extension { get; set; }

        /// <summary>
        /// Size in bytes
        /// </summary>
        /// <value>Size in bytes</value>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullBlock {\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  BlockTransactions: ").Append(BlockTransactions).Append("\n");
            sb.Append("  AdProofs: ").Append(AdProofs).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FullBlock);
        }

        /// <summary>
        /// Returns true if FullBlock instances are equal
        /// </summary>
        /// <param name="input">Instance of FullBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullBlock input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.BlockTransactions == input.BlockTransactions ||
                    (this.BlockTransactions != null &&
                    this.BlockTransactions.Equals(input.BlockTransactions))
                ) && 
                (
                    this.AdProofs == input.AdProofs ||
                    (this.AdProofs != null &&
                    this.AdProofs.Equals(input.AdProofs))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Header != null)
                    hashCode = hashCode * 59 + this.Header.GetHashCode();
                if (this.BlockTransactions != null)
                    hashCode = hashCode * 59 + this.BlockTransactions.GetHashCode();
                if (this.AdProofs != null)
                    hashCode = hashCode * 59 + this.AdProofs.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
