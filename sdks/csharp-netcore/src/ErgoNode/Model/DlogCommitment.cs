/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// Randomness and commitment for the first step of the Schnorr protocol
    /// </summary>
    [DataContract(Name = "DlogCommitment")]
    public partial class DlogCommitment : IEquatable<DlogCommitment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DlogCommitment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DlogCommitment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DlogCommitment" /> class.
        /// </summary>
        /// <param name="r">Hex-encoded big-endian 256-bits secret exponent (required).</param>
        /// <param name="a">Hex-encoded \&quot;g\&quot; generator for the Diffie-Hellman tuple (secp256k1 curve point) (required).</param>
        public DlogCommitment(string r = default(string), string a = default(string))
        {
            // to ensure "r" is required (not null)
            if (r == null) {
                throw new ArgumentNullException("r is a required property for DlogCommitment and cannot be null");
            }
            this.R = r;
            // to ensure "a" is required (not null)
            if (a == null) {
                throw new ArgumentNullException("a is a required property for DlogCommitment and cannot be null");
            }
            this.A = a;
        }

        /// <summary>
        /// Hex-encoded big-endian 256-bits secret exponent
        /// </summary>
        /// <value>Hex-encoded big-endian 256-bits secret exponent</value>
        [DataMember(Name = "r", IsRequired = true, EmitDefaultValue = false)]
        public string R { get; set; }

        /// <summary>
        /// Hex-encoded \&quot;g\&quot; generator for the Diffie-Hellman tuple (secp256k1 curve point)
        /// </summary>
        /// <value>Hex-encoded \&quot;g\&quot; generator for the Diffie-Hellman tuple (secp256k1 curve point)</value>
        [DataMember(Name = "a", IsRequired = true, EmitDefaultValue = false)]
        public string A { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DlogCommitment {\n");
            sb.Append("  R: ").Append(R).Append("\n");
            sb.Append("  A: ").Append(A).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DlogCommitment);
        }

        /// <summary>
        /// Returns true if DlogCommitment instances are equal
        /// </summary>
        /// <param name="input">Instance of DlogCommitment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DlogCommitment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.R == input.R ||
                    (this.R != null &&
                    this.R.Equals(input.R))
                ) && 
                (
                    this.A == input.A ||
                    (this.A != null &&
                    this.A.Equals(input.A))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.R != null)
                    hashCode = hashCode * 59 + this.R.GetHashCode();
                if (this.A != null)
                    hashCode = hashCode * 59 + this.A.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
