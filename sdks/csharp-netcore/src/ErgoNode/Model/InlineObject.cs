/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// InlineObject
    /// </summary>
    [DataContract(Name = "inline_object")]
    public partial class InlineObject : IEquatable<InlineObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject" /> class.
        /// </summary>
        /// <param name="pass">Password to encrypt wallet file with (required).</param>
        /// <param name="mnemonicPass">Optional pass to password-protect mnemonic seed.</param>
        public InlineObject(string pass = default(string), string mnemonicPass = default(string))
        {
            // to ensure "pass" is required (not null)
            if (pass == null) {
                throw new ArgumentNullException("pass is a required property for InlineObject and cannot be null");
            }
            this.Pass = pass;
            this.MnemonicPass = mnemonicPass;
        }

        /// <summary>
        /// Password to encrypt wallet file with
        /// </summary>
        /// <value>Password to encrypt wallet file with</value>
        [DataMember(Name = "pass", IsRequired = true, EmitDefaultValue = false)]
        public string Pass { get; set; }

        /// <summary>
        /// Optional pass to password-protect mnemonic seed
        /// </summary>
        /// <value>Optional pass to password-protect mnemonic seed</value>
        [DataMember(Name = "mnemonicPass", EmitDefaultValue = false)]
        public string MnemonicPass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject {\n");
            sb.Append("  Pass: ").Append(Pass).Append("\n");
            sb.Append("  MnemonicPass: ").Append(MnemonicPass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject);
        }

        /// <summary>
        /// Returns true if InlineObject instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pass == input.Pass ||
                    (this.Pass != null &&
                    this.Pass.Equals(input.Pass))
                ) && 
                (
                    this.MnemonicPass == input.MnemonicPass ||
                    (this.MnemonicPass != null &&
                    this.MnemonicPass.Equals(input.MnemonicPass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pass != null)
                    hashCode = hashCode * 59 + this.Pass.GetHashCode();
                if (this.MnemonicPass != null)
                    hashCode = hashCode * 59 + this.MnemonicPass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
