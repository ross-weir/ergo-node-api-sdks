/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// Transaction augmented with some useful information
    /// </summary>
    [DataContract(Name = "WalletTransaction")]
    public partial class WalletTransaction : IEquatable<WalletTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WalletTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletTransaction" /> class.
        /// </summary>
        /// <param name="id">Base16-encoded transaction id bytes.</param>
        /// <param name="inputs">Transaction inputs (required).</param>
        /// <param name="dataInputs">Transaction data inputs (required).</param>
        /// <param name="outputs">Transaction outputs (required).</param>
        /// <param name="inclusionHeight">Height of a block the transaction was included in (required).</param>
        /// <param name="numConfirmations">Number of transaction confirmations (required).</param>
        /// <param name="scans">Scan identifiers the transaction relates to (required).</param>
        /// <param name="size">Size in bytes.</param>
        public WalletTransaction(string id = default(string), List<ErgoTransactionInput> inputs = default(List<ErgoTransactionInput>), List<ErgoTransactionDataInput> dataInputs = default(List<ErgoTransactionDataInput>), List<ErgoTransactionOutput> outputs = default(List<ErgoTransactionOutput>), int inclusionHeight = default(int), int numConfirmations = default(int), List<int> scans = default(List<int>), int size = default(int))
        {
            // to ensure "inputs" is required (not null)
            if (inputs == null) {
                throw new ArgumentNullException("inputs is a required property for WalletTransaction and cannot be null");
            }
            this.Inputs = inputs;
            // to ensure "dataInputs" is required (not null)
            if (dataInputs == null) {
                throw new ArgumentNullException("dataInputs is a required property for WalletTransaction and cannot be null");
            }
            this.DataInputs = dataInputs;
            // to ensure "outputs" is required (not null)
            if (outputs == null) {
                throw new ArgumentNullException("outputs is a required property for WalletTransaction and cannot be null");
            }
            this.Outputs = outputs;
            this.InclusionHeight = inclusionHeight;
            this.NumConfirmations = numConfirmations;
            // to ensure "scans" is required (not null)
            if (scans == null) {
                throw new ArgumentNullException("scans is a required property for WalletTransaction and cannot be null");
            }
            this.Scans = scans;
            this.Id = id;
            this.Size = size;
        }

        /// <summary>
        /// Base16-encoded transaction id bytes
        /// </summary>
        /// <value>Base16-encoded transaction id bytes</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Transaction inputs
        /// </summary>
        /// <value>Transaction inputs</value>
        [DataMember(Name = "inputs", IsRequired = true, EmitDefaultValue = false)]
        public List<ErgoTransactionInput> Inputs { get; set; }

        /// <summary>
        /// Transaction data inputs
        /// </summary>
        /// <value>Transaction data inputs</value>
        [DataMember(Name = "dataInputs", IsRequired = true, EmitDefaultValue = false)]
        public List<ErgoTransactionDataInput> DataInputs { get; set; }

        /// <summary>
        /// Transaction outputs
        /// </summary>
        /// <value>Transaction outputs</value>
        [DataMember(Name = "outputs", IsRequired = true, EmitDefaultValue = false)]
        public List<ErgoTransactionOutput> Outputs { get; set; }

        /// <summary>
        /// Height of a block the transaction was included in
        /// </summary>
        /// <value>Height of a block the transaction was included in</value>
        [DataMember(Name = "inclusionHeight", IsRequired = true, EmitDefaultValue = false)]
        public int InclusionHeight { get; set; }

        /// <summary>
        /// Number of transaction confirmations
        /// </summary>
        /// <value>Number of transaction confirmations</value>
        [DataMember(Name = "numConfirmations", IsRequired = true, EmitDefaultValue = false)]
        public int NumConfirmations { get; set; }

        /// <summary>
        /// Scan identifiers the transaction relates to
        /// </summary>
        /// <value>Scan identifiers the transaction relates to</value>
        [DataMember(Name = "scans", IsRequired = true, EmitDefaultValue = false)]
        public List<int> Scans { get; set; }

        /// <summary>
        /// Size in bytes
        /// </summary>
        /// <value>Size in bytes</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletTransaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  DataInputs: ").Append(DataInputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  InclusionHeight: ").Append(InclusionHeight).Append("\n");
            sb.Append("  NumConfirmations: ").Append(NumConfirmations).Append("\n");
            sb.Append("  Scans: ").Append(Scans).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WalletTransaction);
        }

        /// <summary>
        /// Returns true if WalletTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.DataInputs == input.DataInputs ||
                    this.DataInputs != null &&
                    input.DataInputs != null &&
                    this.DataInputs.SequenceEqual(input.DataInputs)
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    this.Outputs != null &&
                    input.Outputs != null &&
                    this.Outputs.SequenceEqual(input.Outputs)
                ) && 
                (
                    this.InclusionHeight == input.InclusionHeight ||
                    this.InclusionHeight.Equals(input.InclusionHeight)
                ) && 
                (
                    this.NumConfirmations == input.NumConfirmations ||
                    this.NumConfirmations.Equals(input.NumConfirmations)
                ) && 
                (
                    this.Scans == input.Scans ||
                    this.Scans != null &&
                    input.Scans != null &&
                    this.Scans.SequenceEqual(input.Scans)
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.DataInputs != null)
                    hashCode = hashCode * 59 + this.DataInputs.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                hashCode = hashCode * 59 + this.InclusionHeight.GetHashCode();
                hashCode = hashCode * 59 + this.NumConfirmations.GetHashCode();
                if (this.Scans != null)
                    hashCode = hashCode * 59 + this.Scans.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
