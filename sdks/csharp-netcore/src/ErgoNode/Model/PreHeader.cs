/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// PreHeader
    /// </summary>
    [DataContract(Name = "PreHeader")]
    public partial class PreHeader : IEquatable<PreHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PreHeader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreHeader" /> class.
        /// </summary>
        /// <param name="timestamp">Basic timestamp definition (required).</param>
        /// <param name="version">Ergo blockchain protocol version (required).</param>
        /// <param name="nBits">nBits (required).</param>
        /// <param name="height">height (required).</param>
        /// <param name="parentId">Base16-encoded 32 byte modifier id (required).</param>
        /// <param name="votes">Base16-encoded votes for a soft-fork and parameters (required).</param>
        /// <param name="minerPk">minerPk.</param>
        public PreHeader(long timestamp = default(long), int version = default(int), long nBits = default(long), int height = default(int), string parentId = default(string), string votes = default(string), string minerPk = default(string))
        {
            this.Timestamp = timestamp;
            this._Version = version;
            this.NBits = nBits;
            this.Height = height;
            // to ensure "parentId" is required (not null)
            if (parentId == null) {
                throw new ArgumentNullException("parentId is a required property for PreHeader and cannot be null");
            }
            this.ParentId = parentId;
            // to ensure "votes" is required (not null)
            if (votes == null) {
                throw new ArgumentNullException("votes is a required property for PreHeader and cannot be null");
            }
            this.Votes = votes;
            this.MinerPk = minerPk;
        }

        /// <summary>
        /// Basic timestamp definition
        /// </summary>
        /// <value>Basic timestamp definition</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = false)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Ergo blockchain protocol version
        /// </summary>
        /// <value>Ergo blockchain protocol version</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public int _Version { get; set; }

        /// <summary>
        /// Gets or Sets NBits
        /// </summary>
        [DataMember(Name = "nBits", IsRequired = true, EmitDefaultValue = false)]
        public long NBits { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte modifier id
        /// </summary>
        /// <value>Base16-encoded 32 byte modifier id</value>
        [DataMember(Name = "parentId", IsRequired = true, EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Base16-encoded votes for a soft-fork and parameters
        /// </summary>
        /// <value>Base16-encoded votes for a soft-fork and parameters</value>
        [DataMember(Name = "votes", IsRequired = true, EmitDefaultValue = false)]
        public string Votes { get; set; }

        /// <summary>
        /// Gets or Sets MinerPk
        /// </summary>
        [DataMember(Name = "minerPk", EmitDefaultValue = false)]
        public string MinerPk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreHeader {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  NBits: ").Append(NBits).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Votes: ").Append(Votes).Append("\n");
            sb.Append("  MinerPk: ").Append(MinerPk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreHeader);
        }

        /// <summary>
        /// Returns true if PreHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of PreHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.NBits == input.NBits ||
                    this.NBits.Equals(input.NBits)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.Votes == input.Votes ||
                    (this.Votes != null &&
                    this.Votes.Equals(input.Votes))
                ) && 
                (
                    this.MinerPk == input.MinerPk ||
                    (this.MinerPk != null &&
                    this.MinerPk.Equals(input.MinerPk))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                hashCode = hashCode * 59 + this._Version.GetHashCode();
                hashCode = hashCode * 59 + this.NBits.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.Votes != null)
                    hashCode = hashCode * 59 + this.Votes.GetHashCode();
                if (this.MinerPk != null)
                    hashCode = hashCode * 59 + this.MinerPk.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // NBits (long) minimum
            if(this.NBits < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NBits, must be a value greater than or equal to 0.", new [] { "NBits" });
            }

            // Height (int) minimum
            if(this.Height < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value greater than or equal to 0.", new [] { "Height" });
            }

            yield break;
        }
    }

}
