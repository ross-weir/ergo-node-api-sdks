/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// NipopowProof
    /// </summary>
    [DataContract(Name = "NipopowProof")]
    public partial class NipopowProof : IEquatable<NipopowProof>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NipopowProof" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NipopowProof() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NipopowProof" /> class.
        /// </summary>
        /// <param name="m">security parameter (min μ-level superchain length) (required).</param>
        /// <param name="k">security parameter (min suffix length, &gt;&#x3D; 1) (required).</param>
        /// <param name="prefix">proof prefix headers (required).</param>
        /// <param name="suffixHead">suffixHead (required).</param>
        /// <param name="suffixTail">tail of the proof suffix headers (required).</param>
        public NipopowProof(decimal m = default(decimal), decimal k = default(decimal), List<PopowHeader> prefix = default(List<PopowHeader>), PopowHeader suffixHead = default(PopowHeader), List<BlockHeader> suffixTail = default(List<BlockHeader>))
        {
            this.M = m;
            this.K = k;
            // to ensure "prefix" is required (not null)
            if (prefix == null) {
                throw new ArgumentNullException("prefix is a required property for NipopowProof and cannot be null");
            }
            this.Prefix = prefix;
            // to ensure "suffixHead" is required (not null)
            if (suffixHead == null) {
                throw new ArgumentNullException("suffixHead is a required property for NipopowProof and cannot be null");
            }
            this.SuffixHead = suffixHead;
            // to ensure "suffixTail" is required (not null)
            if (suffixTail == null) {
                throw new ArgumentNullException("suffixTail is a required property for NipopowProof and cannot be null");
            }
            this.SuffixTail = suffixTail;
        }

        /// <summary>
        /// security parameter (min μ-level superchain length)
        /// </summary>
        /// <value>security parameter (min μ-level superchain length)</value>
        [DataMember(Name = "m", IsRequired = true, EmitDefaultValue = false)]
        public decimal M { get; set; }

        /// <summary>
        /// security parameter (min suffix length, &gt;&#x3D; 1)
        /// </summary>
        /// <value>security parameter (min suffix length, &gt;&#x3D; 1)</value>
        [DataMember(Name = "k", IsRequired = true, EmitDefaultValue = false)]
        public decimal K { get; set; }

        /// <summary>
        /// proof prefix headers
        /// </summary>
        /// <value>proof prefix headers</value>
        [DataMember(Name = "prefix", IsRequired = true, EmitDefaultValue = false)]
        public List<PopowHeader> Prefix { get; set; }

        /// <summary>
        /// Gets or Sets SuffixHead
        /// </summary>
        [DataMember(Name = "suffixHead", IsRequired = true, EmitDefaultValue = false)]
        public PopowHeader SuffixHead { get; set; }

        /// <summary>
        /// tail of the proof suffix headers
        /// </summary>
        /// <value>tail of the proof suffix headers</value>
        [DataMember(Name = "suffixTail", IsRequired = true, EmitDefaultValue = false)]
        public List<BlockHeader> SuffixTail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NipopowProof {\n");
            sb.Append("  M: ").Append(M).Append("\n");
            sb.Append("  K: ").Append(K).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  SuffixHead: ").Append(SuffixHead).Append("\n");
            sb.Append("  SuffixTail: ").Append(SuffixTail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NipopowProof);
        }

        /// <summary>
        /// Returns true if NipopowProof instances are equal
        /// </summary>
        /// <param name="input">Instance of NipopowProof to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NipopowProof input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.M == input.M ||
                    this.M.Equals(input.M)
                ) && 
                (
                    this.K == input.K ||
                    this.K.Equals(input.K)
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    this.Prefix != null &&
                    input.Prefix != null &&
                    this.Prefix.SequenceEqual(input.Prefix)
                ) && 
                (
                    this.SuffixHead == input.SuffixHead ||
                    (this.SuffixHead != null &&
                    this.SuffixHead.Equals(input.SuffixHead))
                ) && 
                (
                    this.SuffixTail == input.SuffixTail ||
                    this.SuffixTail != null &&
                    input.SuffixTail != null &&
                    this.SuffixTail.SequenceEqual(input.SuffixTail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.M.GetHashCode();
                hashCode = hashCode * 59 + this.K.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.SuffixHead != null)
                    hashCode = hashCode * 59 + this.SuffixHead.GetHashCode();
                if (this.SuffixTail != null)
                    hashCode = hashCode * 59 + this.SuffixTail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
