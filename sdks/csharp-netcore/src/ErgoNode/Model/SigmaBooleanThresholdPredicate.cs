/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// SigmaBooleanThresholdPredicate
    /// </summary>
    [DataContract(Name = "SigmaBooleanThresholdPredicate")]
    public partial class SigmaBooleanThresholdPredicate : IEquatable<SigmaBooleanThresholdPredicate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SigmaBooleanThresholdPredicate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SigmaBooleanThresholdPredicate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SigmaBooleanThresholdPredicate" /> class.
        /// </summary>
        /// <param name="op">Sigma opCode (required).</param>
        /// <param name="h">Base16-encoded bytes.</param>
        /// <param name="g">Base16-encoded bytes.</param>
        /// <param name="u">Base16-encoded bytes.</param>
        /// <param name="v">Base16-encoded bytes.</param>
        /// <param name="condition">condition.</param>
        /// <param name="args">args.</param>
        public SigmaBooleanThresholdPredicate(int op = default(int), string h = default(string), string g = default(string), string u = default(string), string v = default(string), bool condition = default(bool), List<SigmaBoolean> args = default(List<SigmaBoolean>))
        {
            this.Op = op;
            this.H = h;
            this.G = g;
            this.U = u;
            this.V = v;
            this.Condition = condition;
            this.Args = args;
        }

        /// <summary>
        /// Sigma opCode
        /// </summary>
        /// <value>Sigma opCode</value>
        [DataMember(Name = "op", IsRequired = true, EmitDefaultValue = false)]
        public int Op { get; set; }

        /// <summary>
        /// Base16-encoded bytes
        /// </summary>
        /// <value>Base16-encoded bytes</value>
        [DataMember(Name = "h", EmitDefaultValue = false)]
        public string H { get; set; }

        /// <summary>
        /// Base16-encoded bytes
        /// </summary>
        /// <value>Base16-encoded bytes</value>
        [DataMember(Name = "g", EmitDefaultValue = false)]
        public string G { get; set; }

        /// <summary>
        /// Base16-encoded bytes
        /// </summary>
        /// <value>Base16-encoded bytes</value>
        [DataMember(Name = "u", EmitDefaultValue = false)]
        public string U { get; set; }

        /// <summary>
        /// Base16-encoded bytes
        /// </summary>
        /// <value>Base16-encoded bytes</value>
        [DataMember(Name = "v", EmitDefaultValue = false)]
        public string V { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "condition", EmitDefaultValue = true)]
        public bool Condition { get; set; }

        /// <summary>
        /// Gets or Sets Args
        /// </summary>
        [DataMember(Name = "args", EmitDefaultValue = false)]
        public List<SigmaBoolean> Args { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SigmaBooleanThresholdPredicate {\n");
            sb.Append("  Op: ").Append(Op).Append("\n");
            sb.Append("  H: ").Append(H).Append("\n");
            sb.Append("  G: ").Append(G).Append("\n");
            sb.Append("  U: ").Append(U).Append("\n");
            sb.Append("  V: ").Append(V).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SigmaBooleanThresholdPredicate);
        }

        /// <summary>
        /// Returns true if SigmaBooleanThresholdPredicate instances are equal
        /// </summary>
        /// <param name="input">Instance of SigmaBooleanThresholdPredicate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SigmaBooleanThresholdPredicate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Op == input.Op ||
                    this.Op.Equals(input.Op)
                ) && 
                (
                    this.H == input.H ||
                    (this.H != null &&
                    this.H.Equals(input.H))
                ) && 
                (
                    this.G == input.G ||
                    (this.G != null &&
                    this.G.Equals(input.G))
                ) && 
                (
                    this.U == input.U ||
                    (this.U != null &&
                    this.U.Equals(input.U))
                ) && 
                (
                    this.V == input.V ||
                    (this.V != null &&
                    this.V.Equals(input.V))
                ) && 
                (
                    this.Condition == input.Condition ||
                    this.Condition.Equals(input.Condition)
                ) && 
                (
                    this.Args == input.Args ||
                    this.Args != null &&
                    input.Args != null &&
                    this.Args.SequenceEqual(input.Args)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Op.GetHashCode();
                if (this.H != null)
                    hashCode = hashCode * 59 + this.H.GetHashCode();
                if (this.G != null)
                    hashCode = hashCode * 59 + this.G.GetHashCode();
                if (this.U != null)
                    hashCode = hashCode * 59 + this.U.GetHashCode();
                if (this.V != null)
                    hashCode = hashCode * 59 + this.V.GetHashCode();
                hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.Args != null)
                    hashCode = hashCode * 59 + this.Args.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
