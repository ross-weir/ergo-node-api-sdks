/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// commitment to secret along with secret (!) randomness
    /// </summary>
    [DataContract(Name = "CommitmentWithSecret")]
    public partial class CommitmentWithSecret : IEquatable<CommitmentWithSecret>, IValidatableObject
    {
        /// <summary>
        /// Defines Hint
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HintEnum
        {
            /// <summary>
            /// Enum CmtWithSecret for value: cmtWithSecret
            /// </summary>
            [EnumMember(Value = "cmtWithSecret")]
            CmtWithSecret = 1,

            /// <summary>
            /// Enum CmtReal for value: cmtReal
            /// </summary>
            [EnumMember(Value = "cmtReal")]
            CmtReal = 2,

            /// <summary>
            /// Enum CmtSimulated for value: cmtSimulated
            /// </summary>
            [EnumMember(Value = "cmtSimulated")]
            CmtSimulated = 3

        }


        /// <summary>
        /// Gets or Sets Hint
        /// </summary>
        [DataMember(Name = "hint", IsRequired = true, EmitDefaultValue = false)]
        public HintEnum Hint { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Dlog for value: dlog
            /// </summary>
            [EnumMember(Value = "dlog")]
            Dlog = 1,

            /// <summary>
            /// Enum Dht for value: dht
            /// </summary>
            [EnumMember(Value = "dht")]
            Dht = 2

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommitmentWithSecret" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommitmentWithSecret() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommitmentWithSecret" /> class.
        /// </summary>
        /// <param name="hint">hint (required).</param>
        /// <param name="pubkey">pubkey (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="type">type.</param>
        /// <param name="a">a group element of the commitment (required).</param>
        /// <param name="b">b group element of the commitment (needed for DHT protocol only).</param>
        public CommitmentWithSecret(HintEnum hint = default(HintEnum), SigmaBoolean pubkey = default(SigmaBoolean), string position = default(string), TypeEnum? type = default(TypeEnum?), string a = default(string), string b = default(string))
        {
            this.Hint = hint;
            // to ensure "pubkey" is required (not null)
            if (pubkey == null) {
                throw new ArgumentNullException("pubkey is a required property for CommitmentWithSecret and cannot be null");
            }
            this.Pubkey = pubkey;
            // to ensure "position" is required (not null)
            if (position == null) {
                throw new ArgumentNullException("position is a required property for CommitmentWithSecret and cannot be null");
            }
            this.Position = position;
            // to ensure "a" is required (not null)
            if (a == null) {
                throw new ArgumentNullException("a is a required property for CommitmentWithSecret and cannot be null");
            }
            this.A = a;
            this.Type = type;
            this.B = b;
        }

        /// <summary>
        /// Gets or Sets Pubkey
        /// </summary>
        [DataMember(Name = "pubkey", IsRequired = true, EmitDefaultValue = false)]
        public SigmaBoolean Pubkey { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = false)]
        public string Position { get; set; }

        /// <summary>
        /// a group element of the commitment
        /// </summary>
        /// <value>a group element of the commitment</value>
        [DataMember(Name = "a", IsRequired = true, EmitDefaultValue = false)]
        public string A { get; set; }

        /// <summary>
        /// b group element of the commitment (needed for DHT protocol only)
        /// </summary>
        /// <value>b group element of the commitment (needed for DHT protocol only)</value>
        [DataMember(Name = "b", EmitDefaultValue = false)]
        public string B { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommitmentWithSecret {\n");
            sb.Append("  Hint: ").Append(Hint).Append("\n");
            sb.Append("  Pubkey: ").Append(Pubkey).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  A: ").Append(A).Append("\n");
            sb.Append("  B: ").Append(B).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommitmentWithSecret);
        }

        /// <summary>
        /// Returns true if CommitmentWithSecret instances are equal
        /// </summary>
        /// <param name="input">Instance of CommitmentWithSecret to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommitmentWithSecret input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Hint == input.Hint ||
                    this.Hint.Equals(input.Hint)
                ) && 
                (
                    this.Pubkey == input.Pubkey ||
                    (this.Pubkey != null &&
                    this.Pubkey.Equals(input.Pubkey))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.A == input.A ||
                    (this.A != null &&
                    this.A.Equals(input.A))
                ) && 
                (
                    this.B == input.B ||
                    (this.B != null &&
                    this.B.Equals(input.B))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Hint.GetHashCode();
                if (this.Pubkey != null)
                    hashCode = hashCode * 59 + this.Pubkey.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.A != null)
                    hashCode = hashCode * 59 + this.A.GetHashCode();
                if (this.B != null)
                    hashCode = hashCode * 59 + this.B.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
