/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// Extension
    /// </summary>
    [DataContract(Name = "Extension")]
    public partial class Extension : IEquatable<Extension>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Extension" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Extension() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extension" /> class.
        /// </summary>
        /// <param name="headerId">Base16-encoded 32 byte modifier id (required).</param>
        /// <param name="digest">Base16-encoded 32 byte digest (required).</param>
        /// <param name="fields">List of key-value records (required).</param>
        public Extension(string headerId = default(string), string digest = default(string), List<List> fields = default(List<List>))
        {
            // to ensure "headerId" is required (not null)
            if (headerId == null) {
                throw new ArgumentNullException("headerId is a required property for Extension and cannot be null");
            }
            this.HeaderId = headerId;
            // to ensure "digest" is required (not null)
            if (digest == null) {
                throw new ArgumentNullException("digest is a required property for Extension and cannot be null");
            }
            this.Digest = digest;
            // to ensure "fields" is required (not null)
            if (fields == null) {
                throw new ArgumentNullException("fields is a required property for Extension and cannot be null");
            }
            this.Fields = fields;
        }

        /// <summary>
        /// Base16-encoded 32 byte modifier id
        /// </summary>
        /// <value>Base16-encoded 32 byte modifier id</value>
        [DataMember(Name = "headerId", IsRequired = true, EmitDefaultValue = false)]
        public string HeaderId { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte digest
        /// </summary>
        /// <value>Base16-encoded 32 byte digest</value>
        [DataMember(Name = "digest", IsRequired = true, EmitDefaultValue = false)]
        public string Digest { get; set; }

        /// <summary>
        /// List of key-value records
        /// </summary>
        /// <value>List of key-value records</value>
        [DataMember(Name = "fields", IsRequired = true, EmitDefaultValue = true)]
        public List<List> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Extension {\n");
            sb.Append("  HeaderId: ").Append(HeaderId).Append("\n");
            sb.Append("  Digest: ").Append(Digest).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Extension);
        }

        /// <summary>
        /// Returns true if Extension instances are equal
        /// </summary>
        /// <param name="input">Instance of Extension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Extension input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HeaderId == input.HeaderId ||
                    (this.HeaderId != null &&
                    this.HeaderId.Equals(input.HeaderId))
                ) && 
                (
                    this.Digest == input.Digest ||
                    (this.Digest != null &&
                    this.Digest.Equals(input.Digest))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HeaderId != null)
                    hashCode = hashCode * 59 + this.HeaderId.GetHashCode();
                if (this.Digest != null)
                    hashCode = hashCode * 59 + this.Digest.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
