/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// prover hints extracted from a transaction
    /// </summary>
    [DataContract(Name = "TransactionHintsBag")]
    public partial class TransactionHintsBag : IEquatable<TransactionHintsBag>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionHintsBag" /> class.
        /// </summary>
        /// <param name="secretHints">Hints which contain secrets, do not share them!.</param>
        /// <param name="publicHints">Hints which contain public data only, share them freely!.</param>
        public TransactionHintsBag(List<Dictionary> secretHints = default(List<Dictionary>), List<Dictionary> publicHints = default(List<Dictionary>))
        {
            this.SecretHints = secretHints;
            this.PublicHints = publicHints;
        }

        /// <summary>
        /// Hints which contain secrets, do not share them!
        /// </summary>
        /// <value>Hints which contain secrets, do not share them!</value>
        [DataMember(Name = "secretHints", EmitDefaultValue = false)]
        public List<Dictionary> SecretHints { get; set; }

        /// <summary>
        /// Hints which contain public data only, share them freely!
        /// </summary>
        /// <value>Hints which contain public data only, share them freely!</value>
        [DataMember(Name = "publicHints", EmitDefaultValue = false)]
        public List<Dictionary> PublicHints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionHintsBag {\n");
            sb.Append("  SecretHints: ").Append(SecretHints).Append("\n");
            sb.Append("  PublicHints: ").Append(PublicHints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionHintsBag);
        }

        /// <summary>
        /// Returns true if TransactionHintsBag instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionHintsBag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionHintsBag input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SecretHints == input.SecretHints ||
                    this.SecretHints != null &&
                    input.SecretHints != null &&
                    this.SecretHints.SequenceEqual(input.SecretHints)
                ) && 
                (
                    this.PublicHints == input.PublicHints ||
                    this.PublicHints != null &&
                    input.PublicHints != null &&
                    this.PublicHints.SequenceEqual(input.PublicHints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecretHints != null)
                    hashCode = hashCode * 59 + this.SecretHints.GetHashCode();
                if (this.PublicHints != null)
                    hashCode = hashCode * 59 + this.PublicHints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
