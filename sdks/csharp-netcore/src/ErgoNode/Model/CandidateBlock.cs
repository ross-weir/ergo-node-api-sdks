/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErgoNode.Client.OpenAPIDateConverter;

namespace ErgoNode.Model
{
    /// <summary>
    /// Can be null if node is not mining or candidate block is not ready
    /// </summary>
    [DataContract(Name = "CandidateBlock")]
    public partial class CandidateBlock : IEquatable<CandidateBlock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CandidateBlock" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CandidateBlock() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CandidateBlock" /> class.
        /// </summary>
        /// <param name="version">version.</param>
        /// <param name="extensionHash">Base16-encoded 32 byte digest (required).</param>
        /// <param name="timestamp">Basic timestamp definition.</param>
        /// <param name="stateRoot">Base16-encoded 33 byte digest - digest with extra byte with tree height.</param>
        /// <param name="nBits">nBits.</param>
        /// <param name="adProofBytes">Base16-encoded ad proofs.</param>
        /// <param name="parentId">Base16-encoded 32 byte modifier id (required).</param>
        /// <param name="transactionsNumber">transactionsNumber.</param>
        /// <param name="transactions">Ergo transaction objects.</param>
        /// <param name="votes">Base16-encoded votes for a soft-fork and parameters.</param>
        public CandidateBlock(int version = default(int), string extensionHash = default(string), long timestamp = default(long), string stateRoot = default(string), long nBits = default(long), string adProofBytes = default(string), string parentId = default(string), int transactionsNumber = default(int), List<ErgoTransaction> transactions = default(List<ErgoTransaction>), string votes = default(string))
        {
            // to ensure "extensionHash" is required (not null)
            if (extensionHash == null) {
                throw new ArgumentNullException("extensionHash is a required property for CandidateBlock and cannot be null");
            }
            this.ExtensionHash = extensionHash;
            // to ensure "parentId" is required (not null)
            if (parentId == null) {
                throw new ArgumentNullException("parentId is a required property for CandidateBlock and cannot be null");
            }
            this.ParentId = parentId;
            this._Version = version;
            this.Timestamp = timestamp;
            this.StateRoot = stateRoot;
            this.NBits = nBits;
            this.AdProofBytes = adProofBytes;
            this.TransactionsNumber = transactionsNumber;
            this.Transactions = transactions;
            this.Votes = votes;
        }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int _Version { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte digest
        /// </summary>
        /// <value>Base16-encoded 32 byte digest</value>
        [DataMember(Name = "extensionHash", IsRequired = true, EmitDefaultValue = false)]
        public string ExtensionHash { get; set; }

        /// <summary>
        /// Basic timestamp definition
        /// </summary>
        /// <value>Basic timestamp definition</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Base16-encoded 33 byte digest - digest with extra byte with tree height
        /// </summary>
        /// <value>Base16-encoded 33 byte digest - digest with extra byte with tree height</value>
        [DataMember(Name = "stateRoot", EmitDefaultValue = false)]
        public string StateRoot { get; set; }

        /// <summary>
        /// Gets or Sets NBits
        /// </summary>
        [DataMember(Name = "nBits", EmitDefaultValue = false)]
        public long NBits { get; set; }

        /// <summary>
        /// Base16-encoded ad proofs
        /// </summary>
        /// <value>Base16-encoded ad proofs</value>
        [DataMember(Name = "adProofBytes", EmitDefaultValue = false)]
        public string AdProofBytes { get; set; }

        /// <summary>
        /// Base16-encoded 32 byte modifier id
        /// </summary>
        /// <value>Base16-encoded 32 byte modifier id</value>
        [DataMember(Name = "parentId", IsRequired = true, EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionsNumber
        /// </summary>
        [DataMember(Name = "transactionsNumber", EmitDefaultValue = false)]
        public int TransactionsNumber { get; set; }

        /// <summary>
        /// Ergo transaction objects
        /// </summary>
        /// <value>Ergo transaction objects</value>
        [DataMember(Name = "transactions", EmitDefaultValue = false)]
        public List<ErgoTransaction> Transactions { get; set; }

        /// <summary>
        /// Base16-encoded votes for a soft-fork and parameters
        /// </summary>
        /// <value>Base16-encoded votes for a soft-fork and parameters</value>
        [DataMember(Name = "votes", EmitDefaultValue = false)]
        public string Votes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CandidateBlock {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  ExtensionHash: ").Append(ExtensionHash).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  StateRoot: ").Append(StateRoot).Append("\n");
            sb.Append("  NBits: ").Append(NBits).Append("\n");
            sb.Append("  AdProofBytes: ").Append(AdProofBytes).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  TransactionsNumber: ").Append(TransactionsNumber).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Votes: ").Append(Votes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CandidateBlock);
        }

        /// <summary>
        /// Returns true if CandidateBlock instances are equal
        /// </summary>
        /// <param name="input">Instance of CandidateBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CandidateBlock input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.ExtensionHash == input.ExtensionHash ||
                    (this.ExtensionHash != null &&
                    this.ExtensionHash.Equals(input.ExtensionHash))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.StateRoot == input.StateRoot ||
                    (this.StateRoot != null &&
                    this.StateRoot.Equals(input.StateRoot))
                ) && 
                (
                    this.NBits == input.NBits ||
                    this.NBits.Equals(input.NBits)
                ) && 
                (
                    this.AdProofBytes == input.AdProofBytes ||
                    (this.AdProofBytes != null &&
                    this.AdProofBytes.Equals(input.AdProofBytes))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.TransactionsNumber == input.TransactionsNumber ||
                    this.TransactionsNumber.Equals(input.TransactionsNumber)
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.Votes == input.Votes ||
                    (this.Votes != null &&
                    this.Votes.Equals(input.Votes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.ExtensionHash != null)
                    hashCode = hashCode * 59 + this.ExtensionHash.GetHashCode();
                hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.StateRoot != null)
                    hashCode = hashCode * 59 + this.StateRoot.GetHashCode();
                hashCode = hashCode * 59 + this.NBits.GetHashCode();
                if (this.AdProofBytes != null)
                    hashCode = hashCode * 59 + this.AdProofBytes.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                hashCode = hashCode * 59 + this.TransactionsNumber.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.Votes != null)
                    hashCode = hashCode * 59 + this.Votes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // NBits (long) minimum
            if(this.NBits < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NBits, must be a value greater than or equal to 0.", new [] { "NBits" });
            }

            yield break;
        }
    }

}
