/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ErgoNode.Client;
using ErgoNode.Model;

namespace ErgoNode.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlocksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the block header info by a given signature
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block header</param>
        /// <returns>BlockHeader</returns>
        BlockHeader GetBlockHeaderById(string headerId);

        /// <summary>
        /// Get the block header info by a given signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block header</param>
        /// <returns>ApiResponse of BlockHeader</returns>
        ApiResponse<BlockHeader> GetBlockHeaderByIdWithHttpInfo(string headerId);
        /// <summary>
        /// Get the block transactions info by a given signature
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <returns>BlockTransactions</returns>
        BlockTransactions GetBlockTransactionsById(string headerId);

        /// <summary>
        /// Get the block transactions info by a given signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <returns>ApiResponse of BlockTransactions</returns>
        ApiResponse<BlockTransactions> GetBlockTransactionsByIdWithHttpInfo(string headerId);
        /// <summary>
        /// Get headers in a specified range
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromHeight">Min header height (optional, default to 0)</param>
        /// <param name="toHeight">Max header height (best header height by default) (optional, default to -1)</param>
        /// <returns>List&lt;BlockHeader&gt;</returns>
        List<BlockHeader> GetChainSlice(int? fromHeight = default(int?), int? toHeight = default(int?));

        /// <summary>
        /// Get headers in a specified range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromHeight">Min header height (optional, default to 0)</param>
        /// <param name="toHeight">Max header height (best header height by default) (optional, default to -1)</param>
        /// <returns>ApiResponse of List&lt;BlockHeader&gt;</returns>
        ApiResponse<List<BlockHeader>> GetChainSliceWithHttpInfo(int? fromHeight = default(int?), int? toHeight = default(int?));
        /// <summary>
        /// Get the header ids at a given height
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHeight">Height of a wanted block</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetFullBlockAt(int blockHeight);

        /// <summary>
        /// Get the header ids at a given height
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHeight">Height of a wanted block</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetFullBlockAtWithHttpInfo(int blockHeight);
        /// <summary>
        /// Get the full block info by a given signature
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block</param>
        /// <returns>FullBlock</returns>
        FullBlock GetFullBlockById(string headerId);

        /// <summary>
        /// Get the full block info by a given signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block</param>
        /// <returns>ApiResponse of FullBlock</returns>
        ApiResponse<FullBlock> GetFullBlockByIdWithHttpInfo(string headerId);
        /// <summary>
        /// Get the Array of header ids
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetHeaderIds(int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Get the Array of header ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetHeaderIdsWithHttpInfo(int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Get the last headers objects
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">count of a wanted block headers</param>
        /// <returns>List&lt;BlockHeader&gt;</returns>
        List<BlockHeader> GetLastHeaders(decimal count);

        /// <summary>
        /// Get the last headers objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">count of a wanted block headers</param>
        /// <returns>ApiResponse of List&lt;BlockHeader&gt;</returns>
        ApiResponse<List<BlockHeader>> GetLastHeadersWithHttpInfo(decimal count);
        /// <summary>
        /// Get the persistent modifier by its id
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifierId">ID of a wanted modifier</param>
        /// <returns></returns>
        void GetModifierById(string modifierId);

        /// <summary>
        /// Get the persistent modifier by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifierId">ID of a wanted modifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetModifierByIdWithHttpInfo(string modifierId);
        /// <summary>
        /// Get Merkle proof for transaction
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="txId">ID of a wanted transaction</param>
        /// <returns>MerkleProof</returns>
        MerkleProof GetProofForTx(string headerId, string txId);

        /// <summary>
        /// Get Merkle proof for transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="txId">ID of a wanted transaction</param>
        /// <returns>ApiResponse of MerkleProof</returns>
        ApiResponse<MerkleProof> GetProofForTxWithHttpInfo(string headerId, string txId);
        /// <summary>
        /// Send a mined block
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullBlock"></param>
        /// <returns></returns>
        void SendMinedBlock(FullBlock fullBlock);

        /// <summary>
        /// Send a mined block
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullBlock"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendMinedBlockWithHttpInfo(FullBlock fullBlock);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlocksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the block header info by a given signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockHeader</returns>
        System.Threading.Tasks.Task<BlockHeader> GetBlockHeaderByIdAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the block header info by a given signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockHeader)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockHeader>> GetBlockHeaderByIdWithHttpInfoAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the block transactions info by a given signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockTransactions</returns>
        System.Threading.Tasks.Task<BlockTransactions> GetBlockTransactionsByIdAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the block transactions info by a given signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockTransactions>> GetBlockTransactionsByIdWithHttpInfoAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get headers in a specified range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromHeight">Min header height (optional, default to 0)</param>
        /// <param name="toHeight">Max header height (best header height by default) (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockHeader&gt;</returns>
        System.Threading.Tasks.Task<List<BlockHeader>> GetChainSliceAsync(int? fromHeight = default(int?), int? toHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get headers in a specified range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromHeight">Min header height (optional, default to 0)</param>
        /// <param name="toHeight">Max header height (best header height by default) (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockHeader&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlockHeader>>> GetChainSliceWithHttpInfoAsync(int? fromHeight = default(int?), int? toHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the header ids at a given height
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHeight">Height of a wanted block</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetFullBlockAtAsync(int blockHeight, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the header ids at a given height
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHeight">Height of a wanted block</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetFullBlockAtWithHttpInfoAsync(int blockHeight, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the full block info by a given signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullBlock</returns>
        System.Threading.Tasks.Task<FullBlock> GetFullBlockByIdAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the full block info by a given signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullBlock)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullBlock>> GetFullBlockByIdWithHttpInfoAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Array of header ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetHeaderIdsAsync(int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Array of header ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetHeaderIdsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the last headers objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">count of a wanted block headers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockHeader&gt;</returns>
        System.Threading.Tasks.Task<List<BlockHeader>> GetLastHeadersAsync(decimal count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the last headers objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">count of a wanted block headers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockHeader&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlockHeader>>> GetLastHeadersWithHttpInfoAsync(decimal count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the persistent modifier by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifierId">ID of a wanted modifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetModifierByIdAsync(string modifierId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the persistent modifier by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifierId">ID of a wanted modifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetModifierByIdWithHttpInfoAsync(string modifierId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Merkle proof for transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="txId">ID of a wanted transaction</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerkleProof</returns>
        System.Threading.Tasks.Task<MerkleProof> GetProofForTxAsync(string headerId, string txId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Merkle proof for transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="txId">ID of a wanted transaction</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerkleProof)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerkleProof>> GetProofForTxWithHttpInfoAsync(string headerId, string txId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send a mined block
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullBlock"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendMinedBlockAsync(FullBlock fullBlock, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send a mined block
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullBlock"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendMinedBlockWithHttpInfoAsync(FullBlock fullBlock, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlocksApi : IBlocksApiSync, IBlocksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlocksApi : IBlocksApi
    {
        private ErgoNode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlocksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlocksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlocksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlocksApi(string basePath)
        {
            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                new ErgoNode.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlocksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlocksApi(ErgoNode.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlocksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BlocksApi(ErgoNode.Client.ISynchronousClient client, ErgoNode.Client.IAsynchronousClient asyncClient, ErgoNode.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ErgoNode.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ErgoNode.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ErgoNode.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ErgoNode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the block header info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block header</param>
        /// <returns>BlockHeader</returns>
        public BlockHeader GetBlockHeaderById(string headerId)
        {
            ErgoNode.Client.ApiResponse<BlockHeader> localVarResponse = GetBlockHeaderByIdWithHttpInfo(headerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the block header info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block header</param>
        /// <returns>ApiResponse of BlockHeader</returns>
        public ErgoNode.Client.ApiResponse<BlockHeader> GetBlockHeaderByIdWithHttpInfo(string headerId)
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling BlocksApi->GetBlockHeaderById");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlockHeader>("/blocks/{headerId}/header", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBlockHeaderById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the block header info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockHeader</returns>
        public async System.Threading.Tasks.Task<BlockHeader> GetBlockHeaderByIdAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<BlockHeader> localVarResponse = await GetBlockHeaderByIdWithHttpInfoAsync(headerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the block header info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockHeader)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<BlockHeader>> GetBlockHeaderByIdWithHttpInfoAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling BlocksApi->GetBlockHeaderById");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BlockHeader>("/blocks/{headerId}/header", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBlockHeaderById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the block transactions info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <returns>BlockTransactions</returns>
        public BlockTransactions GetBlockTransactionsById(string headerId)
        {
            ErgoNode.Client.ApiResponse<BlockTransactions> localVarResponse = GetBlockTransactionsByIdWithHttpInfo(headerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the block transactions info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <returns>ApiResponse of BlockTransactions</returns>
        public ErgoNode.Client.ApiResponse<BlockTransactions> GetBlockTransactionsByIdWithHttpInfo(string headerId)
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling BlocksApi->GetBlockTransactionsById");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlockTransactions>("/blocks/{headerId}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBlockTransactionsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the block transactions info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockTransactions</returns>
        public async System.Threading.Tasks.Task<BlockTransactions> GetBlockTransactionsByIdAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<BlockTransactions> localVarResponse = await GetBlockTransactionsByIdWithHttpInfoAsync(headerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the block transactions info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockTransactions)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<BlockTransactions>> GetBlockTransactionsByIdWithHttpInfoAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling BlocksApi->GetBlockTransactionsById");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BlockTransactions>("/blocks/{headerId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBlockTransactionsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get headers in a specified range 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromHeight">Min header height (optional, default to 0)</param>
        /// <param name="toHeight">Max header height (best header height by default) (optional, default to -1)</param>
        /// <returns>List&lt;BlockHeader&gt;</returns>
        public List<BlockHeader> GetChainSlice(int? fromHeight = default(int?), int? toHeight = default(int?))
        {
            ErgoNode.Client.ApiResponse<List<BlockHeader>> localVarResponse = GetChainSliceWithHttpInfo(fromHeight, toHeight);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get headers in a specified range 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromHeight">Min header height (optional, default to 0)</param>
        /// <param name="toHeight">Max header height (best header height by default) (optional, default to -1)</param>
        /// <returns>ApiResponse of List&lt;BlockHeader&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<BlockHeader>> GetChainSliceWithHttpInfo(int? fromHeight = default(int?), int? toHeight = default(int?))
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fromHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "fromHeight", fromHeight));
            }
            if (toHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "toHeight", toHeight));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BlockHeader>>("/blocks/chainSlice", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChainSlice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get headers in a specified range 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromHeight">Min header height (optional, default to 0)</param>
        /// <param name="toHeight">Max header height (best header height by default) (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockHeader&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlockHeader>> GetChainSliceAsync(int? fromHeight = default(int?), int? toHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<BlockHeader>> localVarResponse = await GetChainSliceWithHttpInfoAsync(fromHeight, toHeight, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get headers in a specified range 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromHeight">Min header height (optional, default to 0)</param>
        /// <param name="toHeight">Max header height (best header height by default) (optional, default to -1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockHeader&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<BlockHeader>>> GetChainSliceWithHttpInfoAsync(int? fromHeight = default(int?), int? toHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fromHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "fromHeight", fromHeight));
            }
            if (toHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "toHeight", toHeight));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BlockHeader>>("/blocks/chainSlice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChainSlice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the header ids at a given height 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHeight">Height of a wanted block</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetFullBlockAt(int blockHeight)
        {
            ErgoNode.Client.ApiResponse<List<string>> localVarResponse = GetFullBlockAtWithHttpInfo(blockHeight);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the header ids at a given height 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHeight">Height of a wanted block</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<string>> GetFullBlockAtWithHttpInfo(int blockHeight)
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("blockHeight", ErgoNode.Client.ClientUtils.ParameterToString(blockHeight)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/blocks/at/{blockHeight}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullBlockAt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the header ids at a given height 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHeight">Height of a wanted block</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetFullBlockAtAsync(int blockHeight, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<string>> localVarResponse = await GetFullBlockAtWithHttpInfoAsync(blockHeight, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the header ids at a given height 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHeight">Height of a wanted block</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<string>>> GetFullBlockAtWithHttpInfoAsync(int blockHeight, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("blockHeight", ErgoNode.Client.ClientUtils.ParameterToString(blockHeight)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/blocks/at/{blockHeight}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullBlockAt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the full block info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block</param>
        /// <returns>FullBlock</returns>
        public FullBlock GetFullBlockById(string headerId)
        {
            ErgoNode.Client.ApiResponse<FullBlock> localVarResponse = GetFullBlockByIdWithHttpInfo(headerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the full block info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block</param>
        /// <returns>ApiResponse of FullBlock</returns>
        public ErgoNode.Client.ApiResponse<FullBlock> GetFullBlockByIdWithHttpInfo(string headerId)
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling BlocksApi->GetFullBlockById");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FullBlock>("/blocks/{headerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullBlockById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the full block info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullBlock</returns>
        public async System.Threading.Tasks.Task<FullBlock> GetFullBlockByIdAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<FullBlock> localVarResponse = await GetFullBlockByIdWithHttpInfoAsync(headerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the full block info by a given signature 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullBlock)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<FullBlock>> GetFullBlockByIdWithHttpInfoAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling BlocksApi->GetFullBlockById");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FullBlock>("/blocks/{headerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullBlockById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Array of header ids 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetHeaderIds(int? limit = default(int?), int? offset = default(int?))
        {
            ErgoNode.Client.ApiResponse<List<string>> localVarResponse = GetHeaderIdsWithHttpInfo(limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Array of header ids 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<string>> GetHeaderIdsWithHttpInfo(int? limit = default(int?), int? offset = default(int?))
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/blocks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHeaderIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Array of header ids 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetHeaderIdsAsync(int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<string>> localVarResponse = await GetHeaderIdsWithHttpInfoAsync(limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Array of header ids 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<string>>> GetHeaderIdsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/blocks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHeaderIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the last headers objects 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">count of a wanted block headers</param>
        /// <returns>List&lt;BlockHeader&gt;</returns>
        public List<BlockHeader> GetLastHeaders(decimal count)
        {
            ErgoNode.Client.ApiResponse<List<BlockHeader>> localVarResponse = GetLastHeadersWithHttpInfo(count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the last headers objects 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">count of a wanted block headers</param>
        /// <returns>ApiResponse of List&lt;BlockHeader&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<BlockHeader>> GetLastHeadersWithHttpInfo(decimal count)
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("count", ErgoNode.Client.ClientUtils.ParameterToString(count)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BlockHeader>>("/blocks/lastHeaders/{count}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLastHeaders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the last headers objects 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">count of a wanted block headers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockHeader&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlockHeader>> GetLastHeadersAsync(decimal count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<BlockHeader>> localVarResponse = await GetLastHeadersWithHttpInfoAsync(count, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the last headers objects 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">count of a wanted block headers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockHeader&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<BlockHeader>>> GetLastHeadersWithHttpInfoAsync(decimal count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("count", ErgoNode.Client.ClientUtils.ParameterToString(count)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BlockHeader>>("/blocks/lastHeaders/{count}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLastHeaders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the persistent modifier by its id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifierId">ID of a wanted modifier</param>
        /// <returns></returns>
        public void GetModifierById(string modifierId)
        {
            GetModifierByIdWithHttpInfo(modifierId);
        }

        /// <summary>
        /// Get the persistent modifier by its id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifierId">ID of a wanted modifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ErgoNode.Client.ApiResponse<Object> GetModifierByIdWithHttpInfo(string modifierId)
        {
            // verify the required parameter 'modifierId' is set
            if (modifierId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'modifierId' when calling BlocksApi->GetModifierById");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("modifierId", ErgoNode.Client.ClientUtils.ParameterToString(modifierId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/blocks/modifier/{modifierId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModifierById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the persistent modifier by its id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifierId">ID of a wanted modifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetModifierByIdAsync(string modifierId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetModifierByIdWithHttpInfoAsync(modifierId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the persistent modifier by its id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifierId">ID of a wanted modifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<Object>> GetModifierByIdWithHttpInfoAsync(string modifierId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modifierId' is set
            if (modifierId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'modifierId' when calling BlocksApi->GetModifierById");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("modifierId", ErgoNode.Client.ClientUtils.ParameterToString(modifierId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/blocks/modifier/{modifierId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModifierById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Merkle proof for transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="txId">ID of a wanted transaction</param>
        /// <returns>MerkleProof</returns>
        public MerkleProof GetProofForTx(string headerId, string txId)
        {
            ErgoNode.Client.ApiResponse<MerkleProof> localVarResponse = GetProofForTxWithHttpInfo(headerId, txId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Merkle proof for transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="txId">ID of a wanted transaction</param>
        /// <returns>ApiResponse of MerkleProof</returns>
        public ErgoNode.Client.ApiResponse<MerkleProof> GetProofForTxWithHttpInfo(string headerId, string txId)
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling BlocksApi->GetProofForTx");

            // verify the required parameter 'txId' is set
            if (txId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'txId' when calling BlocksApi->GetProofForTx");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("txId", ErgoNode.Client.ClientUtils.ParameterToString(txId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MerkleProof>("/blocks/{headerId}/proofFor/{txId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProofForTx", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Merkle proof for transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="txId">ID of a wanted transaction</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerkleProof</returns>
        public async System.Threading.Tasks.Task<MerkleProof> GetProofForTxAsync(string headerId, string txId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<MerkleProof> localVarResponse = await GetProofForTxWithHttpInfoAsync(headerId, txId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Merkle proof for transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of a wanted block transactions</param>
        /// <param name="txId">ID of a wanted transaction</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerkleProof)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<MerkleProof>> GetProofForTxWithHttpInfoAsync(string headerId, string txId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling BlocksApi->GetProofForTx");

            // verify the required parameter 'txId' is set
            if (txId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'txId' when calling BlocksApi->GetProofForTx");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("txId", ErgoNode.Client.ClientUtils.ParameterToString(txId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MerkleProof>("/blocks/{headerId}/proofFor/{txId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProofForTx", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a mined block 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullBlock"></param>
        /// <returns></returns>
        public void SendMinedBlock(FullBlock fullBlock)
        {
            SendMinedBlockWithHttpInfo(fullBlock);
        }

        /// <summary>
        /// Send a mined block 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullBlock"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ErgoNode.Client.ApiResponse<Object> SendMinedBlockWithHttpInfo(FullBlock fullBlock)
        {
            // verify the required parameter 'fullBlock' is set
            if (fullBlock == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'fullBlock' when calling BlocksApi->SendMinedBlock");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fullBlock;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/blocks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMinedBlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a mined block 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullBlock"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendMinedBlockAsync(FullBlock fullBlock, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SendMinedBlockWithHttpInfoAsync(fullBlock, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send a mined block 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullBlock"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<Object>> SendMinedBlockWithHttpInfoAsync(FullBlock fullBlock, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fullBlock' is set
            if (fullBlock == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'fullBlock' when calling BlocksApi->SendMinedBlock");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fullBlock;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/blocks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMinedBlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
