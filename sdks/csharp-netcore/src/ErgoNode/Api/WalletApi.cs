/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ErgoNode.Client;
using ErgoNode.Model;

namespace ErgoNode.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <returns>string</returns>
        string AddBox(ScanIdsBox scanIdsBox);

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddBoxWithHttpInfo(ScanIdsBox scanIdsBox);
        /// <summary>
        /// Check whether mnemonic phrase is corresponding to the wallet seed
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CheckSeed(InlineObject2 inlineObject2);

        /// <summary>
        /// Check whether mnemonic phrase is corresponding to the wallet seed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CheckSeedWithHttpInfo(InlineObject2 inlineObject2);
        /// <summary>
        /// Extract hints from a transaction
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hintExtractionRequest"></param>
        /// <returns>TransactionHintsBag</returns>
        TransactionHintsBag ExtractHints(HintExtractionRequest hintExtractionRequest);

        /// <summary>
        /// Extract hints from a transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hintExtractionRequest"></param>
        /// <returns>ApiResponse of TransactionHintsBag</returns>
        ApiResponse<TransactionHintsBag> ExtractHintsWithHttpInfo(HintExtractionRequest hintExtractionRequest);
        /// <summary>
        /// Generate signature commitments for inputs of an unsigned transaction
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCommitmentsRequest"></param>
        /// <returns>TransactionHintsBag</returns>
        TransactionHintsBag GenerateCommitments(GenerateCommitmentsRequest generateCommitmentsRequest);

        /// <summary>
        /// Generate signature commitments for inputs of an unsigned transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCommitmentsRequest"></param>
        /// <returns>ApiResponse of TransactionHintsBag</returns>
        ApiResponse<TransactionHintsBag> GenerateCommitmentsWithHttpInfo(GenerateCommitmentsRequest generateCommitmentsRequest);
        /// <summary>
        /// Get wallet status
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetWalletStatus();

        /// <summary>
        /// Get wallet status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetWalletStatusWithHttpInfo();
        /// <summary>
        /// Get wallet addresses
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> WalletAddresses();

        /// <summary>
        /// Get wallet addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> WalletAddressesWithHttpInfo();
        /// <summary>
        /// Get total amount of confirmed Ergo tokens and assets
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BalancesSnapshot</returns>
        BalancesSnapshot WalletBalances();

        /// <summary>
        /// Get total amount of confirmed Ergo tokens and assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BalancesSnapshot</returns>
        ApiResponse<BalancesSnapshot> WalletBalancesWithHttpInfo();
        /// <summary>
        /// Get summary amount of confirmed plus unconfirmed Ergo tokens and assets
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BalancesSnapshot</returns>
        BalancesSnapshot WalletBalancesUnconfirmed();

        /// <summary>
        /// Get summary amount of confirmed plus unconfirmed Ergo tokens and assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BalancesSnapshot</returns>
        ApiResponse<BalancesSnapshot> WalletBalancesUnconfirmedWithHttpInfo();
        /// <summary>
        /// Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get mempool boxes included.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>List&lt;WalletBox&gt;</returns>
        List<WalletBox> WalletBoxes(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?));

        /// <summary>
        /// Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get mempool boxes included.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;WalletBox&gt;</returns>
        ApiResponse<List<WalletBox>> WalletBoxesWithHttpInfo(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?));
        /// <summary>
        /// Get a list of collected boxes.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxesRequestHolder">This API method recieves balance and assets, according to which, it&#39;s collecting result</param>
        /// <returns>List&lt;WalletBox&gt;</returns>
        List<WalletBox> WalletBoxesCollect(BoxesRequestHolder boxesRequestHolder);

        /// <summary>
        /// Get a list of collected boxes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxesRequestHolder">This API method recieves balance and assets, according to which, it&#39;s collecting result</param>
        /// <returns>ApiResponse of List&lt;WalletBox&gt;</returns>
        ApiResponse<List<WalletBox>> WalletBoxesCollectWithHttpInfo(BoxesRequestHolder boxesRequestHolder);
        /// <summary>
        /// Derive new key according to a provided path
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 WalletDeriveKey(InlineObject5 inlineObject5);

        /// <summary>
        /// Derive new key according to a provided path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> WalletDeriveKeyWithHttpInfo(InlineObject5 inlineObject5);
        /// <summary>
        /// Derive next key
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 WalletDeriveNextKey();

        /// <summary>
        /// Derive next key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> WalletDeriveNextKeyWithHttpInfo();
        /// <summary>
        /// Get wallet-related transaction by id
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction id</param>
        /// <returns>List&lt;WalletTransaction&gt;</returns>
        List<WalletTransaction> WalletGetTransaction(string id);

        /// <summary>
        /// Get wallet-related transaction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction id</param>
        /// <returns>ApiResponse of List&lt;WalletTransaction&gt;</returns>
        ApiResponse<List<WalletTransaction>> WalletGetTransactionWithHttpInfo(string id);
        /// <summary>
        /// Initialize new wallet with randomly generated seed
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 WalletInit(InlineObject inlineObject);

        /// <summary>
        /// Initialize new wallet with randomly generated seed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> WalletInitWithHttpInfo(InlineObject inlineObject);
        /// <summary>
        /// Lock wallet
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void WalletLock();

        /// <summary>
        /// Lock wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WalletLockWithHttpInfo();
        /// <summary>
        /// Generate and send payment transaction (default fee of 0.001 Erg is used)
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest"></param>
        /// <returns>string</returns>
        string WalletPaymentTransactionGenerateAndSend(List<PaymentRequest> paymentRequest);

        /// <summary>
        /// Generate and send payment transaction (default fee of 0.001 Erg is used)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> WalletPaymentTransactionGenerateAndSendWithHttpInfo(List<PaymentRequest> paymentRequest);
        /// <summary>
        /// Rescan wallet (all the available full blocks)
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void WalletRescan();

        /// <summary>
        /// Rescan wallet (all the available full blocks)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WalletRescanWithHttpInfo();
        /// <summary>
        /// Create new wallet from existing mnemonic seed
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns></returns>
        void WalletRestore(InlineObject1 inlineObject1);

        /// <summary>
        /// Create new wallet from existing mnemonic seed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WalletRestoreWithHttpInfo(InlineObject1 inlineObject1);
        /// <summary>
        /// Generate arbitrary transaction from array of requests.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \&quot;assets\&quot; and \&quot;registers\&quot; fields are not needed. For asset issuance request, \&quot;registers\&quot; field is not needed. You may specify boxes to spend by providing them in \&quot;inputsRaw\&quot;. Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \&quot;inputsRaw\&quot; empty.</param>
        /// <returns>ErgoTransaction</returns>
        ErgoTransaction WalletTransactionGenerate(RequestsHolder requestsHolder);

        /// <summary>
        /// Generate arbitrary transaction from array of requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \&quot;assets\&quot; and \&quot;registers\&quot; fields are not needed. For asset issuance request, \&quot;registers\&quot; field is not needed. You may specify boxes to spend by providing them in \&quot;inputsRaw\&quot;. Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \&quot;inputsRaw\&quot; empty.</param>
        /// <returns>ApiResponse of ErgoTransaction</returns>
        ApiResponse<ErgoTransaction> WalletTransactionGenerateWithHttpInfo(RequestsHolder requestsHolder);
        /// <summary>
        /// Generate and send arbitrary transaction
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">See description of /wallet/transaction/generate</param>
        /// <returns>string</returns>
        string WalletTransactionGenerateAndSend(RequestsHolder requestsHolder);

        /// <summary>
        /// Generate and send arbitrary transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">See description of /wallet/transaction/generate</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> WalletTransactionGenerateAndSendWithHttpInfo(RequestsHolder requestsHolder);
        /// <summary>
        /// Sign arbitrary unsigned transaction with wallet secrets and also secrets provided.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSigningRequest">With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported. Please note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \&quot;inputsRaw\&quot; and \&quot;dataInputsRaw\&quot; fields.</param>
        /// <returns>ErgoTransaction</returns>
        ErgoTransaction WalletTransactionSign(TransactionSigningRequest transactionSigningRequest);

        /// <summary>
        /// Sign arbitrary unsigned transaction with wallet secrets and also secrets provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSigningRequest">With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported. Please note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \&quot;inputsRaw\&quot; and \&quot;dataInputsRaw\&quot; fields.</param>
        /// <returns>ApiResponse of ErgoTransaction</returns>
        ApiResponse<ErgoTransaction> WalletTransactionSignWithHttpInfo(TransactionSigningRequest transactionSigningRequest);
        /// <summary>
        /// Get a list of all wallet-related transactions
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <returns>List&lt;WalletTransaction&gt;</returns>
        List<WalletTransaction> WalletTransactions(int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?));

        /// <summary>
        /// Get a list of all wallet-related transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <returns>ApiResponse of List&lt;WalletTransaction&gt;</returns>
        ApiResponse<List<WalletTransaction>> WalletTransactionsWithHttpInfo(int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?));
        /// <summary>
        /// Get scan-related transactions by scan id
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <returns>List&lt;WalletTransaction&gt;</returns>
        List<WalletTransaction> WalletTransactionsByScanId(int scanId, int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?));

        /// <summary>
        /// Get scan-related transactions by scan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <returns>ApiResponse of List&lt;WalletTransaction&gt;</returns>
        ApiResponse<List<WalletTransaction>> WalletTransactionsByScanIdWithHttpInfo(int scanId, int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?));
        /// <summary>
        /// Unlock wallet
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns></returns>
        void WalletUnlock(InlineObject3 inlineObject3);

        /// <summary>
        /// Unlock wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WalletUnlockWithHttpInfo(InlineObject3 inlineObject3);
        /// <summary>
        /// Generate unsigned transaction from array of requests.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">The same as /wallet/transaction/generate but generates unsigned transaction.</param>
        /// <returns>UnsignedErgoTransaction</returns>
        UnsignedErgoTransaction WalletUnsignedTransactionGenerate(RequestsHolder requestsHolder);

        /// <summary>
        /// Generate unsigned transaction from array of requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">The same as /wallet/transaction/generate but generates unsigned transaction.</param>
        /// <returns>ApiResponse of UnsignedErgoTransaction</returns>
        ApiResponse<UnsignedErgoTransaction> WalletUnsignedTransactionGenerateWithHttpInfo(RequestsHolder requestsHolder);
        /// <summary>
        /// Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>List&lt;WalletBox&gt;</returns>
        List<WalletBox> WalletUnspentBoxes(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?));

        /// <summary>
        /// Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;WalletBox&gt;</returns>
        ApiResponse<List<WalletBox>> WalletUnspentBoxesWithHttpInfo(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?));
        /// <summary>
        /// Update address to be used to send change to
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns></returns>
        void WalletUpdateChangeAddress(InlineObject4 inlineObject4);

        /// <summary>
        /// Update address to be used to send change to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WalletUpdateChangeAddressWithHttpInfo(InlineObject4 inlineObject4);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddBoxAsync(ScanIdsBox scanIdsBox, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddBoxWithHttpInfoAsync(ScanIdsBox scanIdsBox, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check whether mnemonic phrase is corresponding to the wallet seed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CheckSeedAsync(InlineObject2 inlineObject2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check whether mnemonic phrase is corresponding to the wallet seed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CheckSeedWithHttpInfoAsync(InlineObject2 inlineObject2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extract hints from a transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hintExtractionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionHintsBag</returns>
        System.Threading.Tasks.Task<TransactionHintsBag> ExtractHintsAsync(HintExtractionRequest hintExtractionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract hints from a transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hintExtractionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionHintsBag)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionHintsBag>> ExtractHintsWithHttpInfoAsync(HintExtractionRequest hintExtractionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate signature commitments for inputs of an unsigned transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCommitmentsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionHintsBag</returns>
        System.Threading.Tasks.Task<TransactionHintsBag> GenerateCommitmentsAsync(GenerateCommitmentsRequest generateCommitmentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate signature commitments for inputs of an unsigned transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCommitmentsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionHintsBag)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionHintsBag>> GenerateCommitmentsWithHttpInfoAsync(GenerateCommitmentsRequest generateCommitmentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get wallet status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetWalletStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get wallet status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetWalletStatusWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get wallet addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> WalletAddressesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get wallet addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> WalletAddressesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get total amount of confirmed Ergo tokens and assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BalancesSnapshot</returns>
        System.Threading.Tasks.Task<BalancesSnapshot> WalletBalancesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get total amount of confirmed Ergo tokens and assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BalancesSnapshot)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalancesSnapshot>> WalletBalancesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get summary amount of confirmed plus unconfirmed Ergo tokens and assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BalancesSnapshot</returns>
        System.Threading.Tasks.Task<BalancesSnapshot> WalletBalancesUnconfirmedAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get summary amount of confirmed plus unconfirmed Ergo tokens and assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BalancesSnapshot)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalancesSnapshot>> WalletBalancesUnconfirmedWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get mempool boxes included.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletBox&gt;</returns>
        System.Threading.Tasks.Task<List<WalletBox>> WalletBoxesAsync(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get mempool boxes included.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletBox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WalletBox>>> WalletBoxesWithHttpInfoAsync(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of collected boxes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxesRequestHolder">This API method recieves balance and assets, according to which, it&#39;s collecting result</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletBox&gt;</returns>
        System.Threading.Tasks.Task<List<WalletBox>> WalletBoxesCollectAsync(BoxesRequestHolder boxesRequestHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of collected boxes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxesRequestHolder">This API method recieves balance and assets, according to which, it&#39;s collecting result</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletBox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WalletBox>>> WalletBoxesCollectWithHttpInfoAsync(BoxesRequestHolder boxesRequestHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Derive new key according to a provided path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> WalletDeriveKeyAsync(InlineObject5 inlineObject5, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Derive new key according to a provided path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> WalletDeriveKeyWithHttpInfoAsync(InlineObject5 inlineObject5, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Derive next key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> WalletDeriveNextKeyAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Derive next key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> WalletDeriveNextKeyWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get wallet-related transaction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<WalletTransaction>> WalletGetTransactionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get wallet-related transaction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WalletTransaction>>> WalletGetTransactionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initialize new wallet with randomly generated seed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> WalletInitAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initialize new wallet with randomly generated seed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> WalletInitWithHttpInfoAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lock wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WalletLockAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lock wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletLockWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate and send payment transaction (default fee of 0.001 Erg is used)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> WalletPaymentTransactionGenerateAndSendAsync(List<PaymentRequest> paymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate and send payment transaction (default fee of 0.001 Erg is used)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> WalletPaymentTransactionGenerateAndSendWithHttpInfoAsync(List<PaymentRequest> paymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rescan wallet (all the available full blocks)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WalletRescanAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rescan wallet (all the available full blocks)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletRescanWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new wallet from existing mnemonic seed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WalletRestoreAsync(InlineObject1 inlineObject1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new wallet from existing mnemonic seed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletRestoreWithHttpInfoAsync(InlineObject1 inlineObject1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate arbitrary transaction from array of requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \&quot;assets\&quot; and \&quot;registers\&quot; fields are not needed. For asset issuance request, \&quot;registers\&quot; field is not needed. You may specify boxes to spend by providing them in \&quot;inputsRaw\&quot;. Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \&quot;inputsRaw\&quot; empty.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErgoTransaction</returns>
        System.Threading.Tasks.Task<ErgoTransaction> WalletTransactionGenerateAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate arbitrary transaction from array of requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \&quot;assets\&quot; and \&quot;registers\&quot; fields are not needed. For asset issuance request, \&quot;registers\&quot; field is not needed. You may specify boxes to spend by providing them in \&quot;inputsRaw\&quot;. Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \&quot;inputsRaw\&quot; empty.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErgoTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<ErgoTransaction>> WalletTransactionGenerateWithHttpInfoAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate and send arbitrary transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">See description of /wallet/transaction/generate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> WalletTransactionGenerateAndSendAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate and send arbitrary transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">See description of /wallet/transaction/generate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> WalletTransactionGenerateAndSendWithHttpInfoAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sign arbitrary unsigned transaction with wallet secrets and also secrets provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSigningRequest">With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported. Please note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \&quot;inputsRaw\&quot; and \&quot;dataInputsRaw\&quot; fields.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErgoTransaction</returns>
        System.Threading.Tasks.Task<ErgoTransaction> WalletTransactionSignAsync(TransactionSigningRequest transactionSigningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sign arbitrary unsigned transaction with wallet secrets and also secrets provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSigningRequest">With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported. Please note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \&quot;inputsRaw\&quot; and \&quot;dataInputsRaw\&quot; fields.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErgoTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<ErgoTransaction>> WalletTransactionSignWithHttpInfoAsync(TransactionSigningRequest transactionSigningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of all wallet-related transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<WalletTransaction>> WalletTransactionsAsync(int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all wallet-related transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WalletTransaction>>> WalletTransactionsWithHttpInfoAsync(int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get scan-related transactions by scan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<WalletTransaction>> WalletTransactionsByScanIdAsync(int scanId, int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get scan-related transactions by scan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WalletTransaction>>> WalletTransactionsByScanIdWithHttpInfoAsync(int scanId, int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlock wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WalletUnlockAsync(InlineObject3 inlineObject3, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unlock wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletUnlockWithHttpInfoAsync(InlineObject3 inlineObject3, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate unsigned transaction from array of requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">The same as /wallet/transaction/generate but generates unsigned transaction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnsignedErgoTransaction</returns>
        System.Threading.Tasks.Task<UnsignedErgoTransaction> WalletUnsignedTransactionGenerateAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate unsigned transaction from array of requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">The same as /wallet/transaction/generate but generates unsigned transaction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnsignedErgoTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnsignedErgoTransaction>> WalletUnsignedTransactionGenerateWithHttpInfoAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletBox&gt;</returns>
        System.Threading.Tasks.Task<List<WalletBox>> WalletUnspentBoxesAsync(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletBox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WalletBox>>> WalletUnspentBoxesWithHttpInfoAsync(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update address to be used to send change to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WalletUpdateChangeAddressAsync(InlineObject4 inlineObject4, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update address to be used to send change to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletUpdateChangeAddressWithHttpInfoAsync(InlineObject4 inlineObject4, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApi : IWalletApiSync, IWalletApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletApi : IWalletApi
    {
        private ErgoNode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi(string basePath)
        {
            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                new ErgoNode.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletApi(ErgoNode.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WalletApi(ErgoNode.Client.ISynchronousClient client, ErgoNode.Client.IAsynchronousClient asyncClient, ErgoNode.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ErgoNode.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ErgoNode.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ErgoNode.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ErgoNode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <returns>string</returns>
        public string AddBox(ScanIdsBox scanIdsBox)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = AddBoxWithHttpInfo(scanIdsBox);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> AddBoxWithHttpInfo(ScanIdsBox scanIdsBox)
        {
            // verify the required parameter 'scanIdsBox' is set
            if (scanIdsBox == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'scanIdsBox' when calling WalletApi->AddBox");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = scanIdsBox;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/scan/addBox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddBox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddBoxAsync(ScanIdsBox scanIdsBox, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await AddBoxWithHttpInfoAsync(scanIdsBox, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> AddBoxWithHttpInfoAsync(ScanIdsBox scanIdsBox, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scanIdsBox' is set
            if (scanIdsBox == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'scanIdsBox' when calling WalletApi->AddBox");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = scanIdsBox;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/scan/addBox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddBox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check whether mnemonic phrase is corresponding to the wallet seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CheckSeed(InlineObject2 inlineObject2)
        {
            ErgoNode.Client.ApiResponse<InlineResponse2001> localVarResponse = CheckSeedWithHttpInfo(inlineObject2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether mnemonic phrase is corresponding to the wallet seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ErgoNode.Client.ApiResponse<InlineResponse2001> CheckSeedWithHttpInfo(InlineObject2 inlineObject2)
        {
            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling WalletApi->CheckSeed");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject2;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2001>("/wallet/check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckSeed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check whether mnemonic phrase is corresponding to the wallet seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CheckSeedAsync(InlineObject2 inlineObject2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<InlineResponse2001> localVarResponse = await CheckSeedWithHttpInfoAsync(inlineObject2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether mnemonic phrase is corresponding to the wallet seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<InlineResponse2001>> CheckSeedWithHttpInfoAsync(InlineObject2 inlineObject2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling WalletApi->CheckSeed");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject2;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2001>("/wallet/check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckSeed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract hints from a transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hintExtractionRequest"></param>
        /// <returns>TransactionHintsBag</returns>
        public TransactionHintsBag ExtractHints(HintExtractionRequest hintExtractionRequest)
        {
            ErgoNode.Client.ApiResponse<TransactionHintsBag> localVarResponse = ExtractHintsWithHttpInfo(hintExtractionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract hints from a transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hintExtractionRequest"></param>
        /// <returns>ApiResponse of TransactionHintsBag</returns>
        public ErgoNode.Client.ApiResponse<TransactionHintsBag> ExtractHintsWithHttpInfo(HintExtractionRequest hintExtractionRequest)
        {
            // verify the required parameter 'hintExtractionRequest' is set
            if (hintExtractionRequest == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'hintExtractionRequest' when calling WalletApi->ExtractHints");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = hintExtractionRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionHintsBag>("/wallet/extractHints", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractHints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract hints from a transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hintExtractionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionHintsBag</returns>
        public async System.Threading.Tasks.Task<TransactionHintsBag> ExtractHintsAsync(HintExtractionRequest hintExtractionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<TransactionHintsBag> localVarResponse = await ExtractHintsWithHttpInfoAsync(hintExtractionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract hints from a transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hintExtractionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionHintsBag)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<TransactionHintsBag>> ExtractHintsWithHttpInfoAsync(HintExtractionRequest hintExtractionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hintExtractionRequest' is set
            if (hintExtractionRequest == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'hintExtractionRequest' when calling WalletApi->ExtractHints");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = hintExtractionRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionHintsBag>("/wallet/extractHints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractHints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate signature commitments for inputs of an unsigned transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCommitmentsRequest"></param>
        /// <returns>TransactionHintsBag</returns>
        public TransactionHintsBag GenerateCommitments(GenerateCommitmentsRequest generateCommitmentsRequest)
        {
            ErgoNode.Client.ApiResponse<TransactionHintsBag> localVarResponse = GenerateCommitmentsWithHttpInfo(generateCommitmentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate signature commitments for inputs of an unsigned transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCommitmentsRequest"></param>
        /// <returns>ApiResponse of TransactionHintsBag</returns>
        public ErgoNode.Client.ApiResponse<TransactionHintsBag> GenerateCommitmentsWithHttpInfo(GenerateCommitmentsRequest generateCommitmentsRequest)
        {
            // verify the required parameter 'generateCommitmentsRequest' is set
            if (generateCommitmentsRequest == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'generateCommitmentsRequest' when calling WalletApi->GenerateCommitments");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = generateCommitmentsRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionHintsBag>("/wallet/generateCommitments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateCommitments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate signature commitments for inputs of an unsigned transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCommitmentsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionHintsBag</returns>
        public async System.Threading.Tasks.Task<TransactionHintsBag> GenerateCommitmentsAsync(GenerateCommitmentsRequest generateCommitmentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<TransactionHintsBag> localVarResponse = await GenerateCommitmentsWithHttpInfoAsync(generateCommitmentsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate signature commitments for inputs of an unsigned transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCommitmentsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionHintsBag)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<TransactionHintsBag>> GenerateCommitmentsWithHttpInfoAsync(GenerateCommitmentsRequest generateCommitmentsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'generateCommitmentsRequest' is set
            if (generateCommitmentsRequest == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'generateCommitmentsRequest' when calling WalletApi->GenerateCommitments");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = generateCommitmentsRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionHintsBag>("/wallet/generateCommitments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateCommitments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get wallet status 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetWalletStatus()
        {
            ErgoNode.Client.ApiResponse<InlineResponse2002> localVarResponse = GetWalletStatusWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get wallet status 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ErgoNode.Client.ApiResponse<InlineResponse2002> GetWalletStatusWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2002>("/wallet/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get wallet status 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetWalletStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<InlineResponse2002> localVarResponse = await GetWalletStatusWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get wallet status 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<InlineResponse2002>> GetWalletStatusWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/wallet/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get wallet addresses 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> WalletAddresses()
        {
            ErgoNode.Client.ApiResponse<List<string>> localVarResponse = WalletAddressesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get wallet addresses 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<string>> WalletAddressesWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/wallet/addresses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletAddresses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get wallet addresses 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> WalletAddressesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<string>> localVarResponse = await WalletAddressesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get wallet addresses 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<string>>> WalletAddressesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/wallet/addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletAddresses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get total amount of confirmed Ergo tokens and assets 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BalancesSnapshot</returns>
        public BalancesSnapshot WalletBalances()
        {
            ErgoNode.Client.ApiResponse<BalancesSnapshot> localVarResponse = WalletBalancesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get total amount of confirmed Ergo tokens and assets 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BalancesSnapshot</returns>
        public ErgoNode.Client.ApiResponse<BalancesSnapshot> WalletBalancesWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BalancesSnapshot>("/wallet/balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get total amount of confirmed Ergo tokens and assets 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BalancesSnapshot</returns>
        public async System.Threading.Tasks.Task<BalancesSnapshot> WalletBalancesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<BalancesSnapshot> localVarResponse = await WalletBalancesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get total amount of confirmed Ergo tokens and assets 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BalancesSnapshot)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<BalancesSnapshot>> WalletBalancesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BalancesSnapshot>("/wallet/balances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get summary amount of confirmed plus unconfirmed Ergo tokens and assets 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BalancesSnapshot</returns>
        public BalancesSnapshot WalletBalancesUnconfirmed()
        {
            ErgoNode.Client.ApiResponse<BalancesSnapshot> localVarResponse = WalletBalancesUnconfirmedWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get summary amount of confirmed plus unconfirmed Ergo tokens and assets 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BalancesSnapshot</returns>
        public ErgoNode.Client.ApiResponse<BalancesSnapshot> WalletBalancesUnconfirmedWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BalancesSnapshot>("/wallet/balances/withUnconfirmed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletBalancesUnconfirmed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get summary amount of confirmed plus unconfirmed Ergo tokens and assets 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BalancesSnapshot</returns>
        public async System.Threading.Tasks.Task<BalancesSnapshot> WalletBalancesUnconfirmedAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<BalancesSnapshot> localVarResponse = await WalletBalancesUnconfirmedWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get summary amount of confirmed plus unconfirmed Ergo tokens and assets 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BalancesSnapshot)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<BalancesSnapshot>> WalletBalancesUnconfirmedWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BalancesSnapshot>("/wallet/balances/withUnconfirmed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletBalancesUnconfirmed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get mempool boxes included. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>List&lt;WalletBox&gt;</returns>
        public List<WalletBox> WalletBoxes(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?))
        {
            ErgoNode.Client.ApiResponse<List<WalletBox>> localVarResponse = WalletBoxesWithHttpInfo(minConfirmations, minInclusionHeight);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get mempool boxes included. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;WalletBox&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<WalletBox>> WalletBoxesWithHttpInfo(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?))
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (minConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minConfirmations", minConfirmations));
            }
            if (minInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minInclusionHeight", minInclusionHeight));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WalletBox>>("/wallet/boxes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletBoxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get mempool boxes included. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletBox&gt;</returns>
        public async System.Threading.Tasks.Task<List<WalletBox>> WalletBoxesAsync(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<WalletBox>> localVarResponse = await WalletBoxesWithHttpInfoAsync(minConfirmations, minInclusionHeight, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get mempool boxes included. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletBox&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<WalletBox>>> WalletBoxesWithHttpInfoAsync(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (minConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minConfirmations", minConfirmations));
            }
            if (minInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minInclusionHeight", minInclusionHeight));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WalletBox>>("/wallet/boxes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletBoxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of collected boxes. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxesRequestHolder">This API method recieves balance and assets, according to which, it&#39;s collecting result</param>
        /// <returns>List&lt;WalletBox&gt;</returns>
        public List<WalletBox> WalletBoxesCollect(BoxesRequestHolder boxesRequestHolder)
        {
            ErgoNode.Client.ApiResponse<List<WalletBox>> localVarResponse = WalletBoxesCollectWithHttpInfo(boxesRequestHolder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of collected boxes. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxesRequestHolder">This API method recieves balance and assets, according to which, it&#39;s collecting result</param>
        /// <returns>ApiResponse of List&lt;WalletBox&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<WalletBox>> WalletBoxesCollectWithHttpInfo(BoxesRequestHolder boxesRequestHolder)
        {
            // verify the required parameter 'boxesRequestHolder' is set
            if (boxesRequestHolder == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'boxesRequestHolder' when calling WalletApi->WalletBoxesCollect");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = boxesRequestHolder;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WalletBox>>("/wallet/boxes/collect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletBoxesCollect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of collected boxes. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxesRequestHolder">This API method recieves balance and assets, according to which, it&#39;s collecting result</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletBox&gt;</returns>
        public async System.Threading.Tasks.Task<List<WalletBox>> WalletBoxesCollectAsync(BoxesRequestHolder boxesRequestHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<WalletBox>> localVarResponse = await WalletBoxesCollectWithHttpInfoAsync(boxesRequestHolder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of collected boxes. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxesRequestHolder">This API method recieves balance and assets, according to which, it&#39;s collecting result</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletBox&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<WalletBox>>> WalletBoxesCollectWithHttpInfoAsync(BoxesRequestHolder boxesRequestHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'boxesRequestHolder' is set
            if (boxesRequestHolder == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'boxesRequestHolder' when calling WalletApi->WalletBoxesCollect");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = boxesRequestHolder;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WalletBox>>("/wallet/boxes/collect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletBoxesCollect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Derive new key according to a provided path 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 WalletDeriveKey(InlineObject5 inlineObject5)
        {
            ErgoNode.Client.ApiResponse<InlineResponse2003> localVarResponse = WalletDeriveKeyWithHttpInfo(inlineObject5);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Derive new key according to a provided path 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ErgoNode.Client.ApiResponse<InlineResponse2003> WalletDeriveKeyWithHttpInfo(InlineObject5 inlineObject5)
        {
            // verify the required parameter 'inlineObject5' is set
            if (inlineObject5 == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject5' when calling WalletApi->WalletDeriveKey");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject5;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2003>("/wallet/deriveKey", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletDeriveKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Derive new key according to a provided path 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> WalletDeriveKeyAsync(InlineObject5 inlineObject5, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<InlineResponse2003> localVarResponse = await WalletDeriveKeyWithHttpInfoAsync(inlineObject5, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Derive new key according to a provided path 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<InlineResponse2003>> WalletDeriveKeyWithHttpInfoAsync(InlineObject5 inlineObject5, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlineObject5' is set
            if (inlineObject5 == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject5' when calling WalletApi->WalletDeriveKey");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject5;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/wallet/deriveKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletDeriveKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Derive next key 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 WalletDeriveNextKey()
        {
            ErgoNode.Client.ApiResponse<InlineResponse2004> localVarResponse = WalletDeriveNextKeyWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Derive next key 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ErgoNode.Client.ApiResponse<InlineResponse2004> WalletDeriveNextKeyWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2004>("/wallet/deriveNextKey", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletDeriveNextKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Derive next key 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> WalletDeriveNextKeyAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<InlineResponse2004> localVarResponse = await WalletDeriveNextKeyWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Derive next key 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<InlineResponse2004>> WalletDeriveNextKeyWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/wallet/deriveNextKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletDeriveNextKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get wallet-related transaction by id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction id</param>
        /// <returns>List&lt;WalletTransaction&gt;</returns>
        public List<WalletTransaction> WalletGetTransaction(string id)
        {
            ErgoNode.Client.ApiResponse<List<WalletTransaction>> localVarResponse = WalletGetTransactionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get wallet-related transaction by id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction id</param>
        /// <returns>ApiResponse of List&lt;WalletTransaction&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<WalletTransaction>> WalletGetTransactionWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'id' when calling WalletApi->WalletGetTransaction");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WalletTransaction>>("/wallet/transactionById", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletGetTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get wallet-related transaction by id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<WalletTransaction>> WalletGetTransactionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<WalletTransaction>> localVarResponse = await WalletGetTransactionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get wallet-related transaction by id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transaction id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<WalletTransaction>>> WalletGetTransactionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'id' when calling WalletApi->WalletGetTransaction");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WalletTransaction>>("/wallet/transactionById", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletGetTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initialize new wallet with randomly generated seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 WalletInit(InlineObject inlineObject)
        {
            ErgoNode.Client.ApiResponse<InlineResponse200> localVarResponse = WalletInitWithHttpInfo(inlineObject);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initialize new wallet with randomly generated seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ErgoNode.Client.ApiResponse<InlineResponse200> WalletInitWithHttpInfo(InlineObject inlineObject)
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling WalletApi->WalletInit");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse200>("/wallet/init", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletInit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initialize new wallet with randomly generated seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> WalletInitAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<InlineResponse200> localVarResponse = await WalletInitWithHttpInfoAsync(inlineObject, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initialize new wallet with randomly generated seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<InlineResponse200>> WalletInitWithHttpInfoAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling WalletApi->WalletInit");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse200>("/wallet/init", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletInit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lock wallet 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void WalletLock()
        {
            WalletLockWithHttpInfo();
        }

        /// <summary>
        /// Lock wallet 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ErgoNode.Client.ApiResponse<Object> WalletLockWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/wallet/lock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletLock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lock wallet 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WalletLockAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WalletLockWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lock wallet 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<Object>> WalletLockWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/wallet/lock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletLock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate and send payment transaction (default fee of 0.001 Erg is used) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest"></param>
        /// <returns>string</returns>
        public string WalletPaymentTransactionGenerateAndSend(List<PaymentRequest> paymentRequest)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = WalletPaymentTransactionGenerateAndSendWithHttpInfo(paymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate and send payment transaction (default fee of 0.001 Erg is used) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest"></param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> WalletPaymentTransactionGenerateAndSendWithHttpInfo(List<PaymentRequest> paymentRequest)
        {
            // verify the required parameter 'paymentRequest' is set
            if (paymentRequest == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'paymentRequest' when calling WalletApi->WalletPaymentTransactionGenerateAndSend");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = paymentRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/wallet/payment/send", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletPaymentTransactionGenerateAndSend", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate and send payment transaction (default fee of 0.001 Erg is used) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> WalletPaymentTransactionGenerateAndSendAsync(List<PaymentRequest> paymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await WalletPaymentTransactionGenerateAndSendWithHttpInfoAsync(paymentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate and send payment transaction (default fee of 0.001 Erg is used) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> WalletPaymentTransactionGenerateAndSendWithHttpInfoAsync(List<PaymentRequest> paymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentRequest' is set
            if (paymentRequest == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'paymentRequest' when calling WalletApi->WalletPaymentTransactionGenerateAndSend");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = paymentRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/wallet/payment/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletPaymentTransactionGenerateAndSend", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rescan wallet (all the available full blocks) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void WalletRescan()
        {
            WalletRescanWithHttpInfo();
        }

        /// <summary>
        /// Rescan wallet (all the available full blocks) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ErgoNode.Client.ApiResponse<Object> WalletRescanWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/wallet/rescan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletRescan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rescan wallet (all the available full blocks) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WalletRescanAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WalletRescanWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Rescan wallet (all the available full blocks) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<Object>> WalletRescanWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/wallet/rescan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletRescan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new wallet from existing mnemonic seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns></returns>
        public void WalletRestore(InlineObject1 inlineObject1)
        {
            WalletRestoreWithHttpInfo(inlineObject1);
        }

        /// <summary>
        /// Create new wallet from existing mnemonic seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ErgoNode.Client.ApiResponse<Object> WalletRestoreWithHttpInfo(InlineObject1 inlineObject1)
        {
            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject1' when calling WalletApi->WalletRestore");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject1;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/wallet/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletRestore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new wallet from existing mnemonic seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WalletRestoreAsync(InlineObject1 inlineObject1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WalletRestoreWithHttpInfoAsync(inlineObject1, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create new wallet from existing mnemonic seed 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<Object>> WalletRestoreWithHttpInfoAsync(InlineObject1 inlineObject1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject1' when calling WalletApi->WalletRestore");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject1;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/wallet/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletRestore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate arbitrary transaction from array of requests. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \&quot;assets\&quot; and \&quot;registers\&quot; fields are not needed. For asset issuance request, \&quot;registers\&quot; field is not needed. You may specify boxes to spend by providing them in \&quot;inputsRaw\&quot;. Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \&quot;inputsRaw\&quot; empty.</param>
        /// <returns>ErgoTransaction</returns>
        public ErgoTransaction WalletTransactionGenerate(RequestsHolder requestsHolder)
        {
            ErgoNode.Client.ApiResponse<ErgoTransaction> localVarResponse = WalletTransactionGenerateWithHttpInfo(requestsHolder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate arbitrary transaction from array of requests. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \&quot;assets\&quot; and \&quot;registers\&quot; fields are not needed. For asset issuance request, \&quot;registers\&quot; field is not needed. You may specify boxes to spend by providing them in \&quot;inputsRaw\&quot;. Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \&quot;inputsRaw\&quot; empty.</param>
        /// <returns>ApiResponse of ErgoTransaction</returns>
        public ErgoNode.Client.ApiResponse<ErgoTransaction> WalletTransactionGenerateWithHttpInfo(RequestsHolder requestsHolder)
        {
            // verify the required parameter 'requestsHolder' is set
            if (requestsHolder == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'requestsHolder' when calling WalletApi->WalletTransactionGenerate");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestsHolder;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ErgoTransaction>("/wallet/transaction/generate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate arbitrary transaction from array of requests. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \&quot;assets\&quot; and \&quot;registers\&quot; fields are not needed. For asset issuance request, \&quot;registers\&quot; field is not needed. You may specify boxes to spend by providing them in \&quot;inputsRaw\&quot;. Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \&quot;inputsRaw\&quot; empty.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErgoTransaction</returns>
        public async System.Threading.Tasks.Task<ErgoTransaction> WalletTransactionGenerateAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<ErgoTransaction> localVarResponse = await WalletTransactionGenerateWithHttpInfoAsync(requestsHolder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate arbitrary transaction from array of requests. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">This API method receives a sequence of requests as an input. Each request will produce an output of the resulting transaction (with fee output created automatically). Currently supported types of requests are payment and asset issuance requests. An example for a transaction with requests of both kinds is provided below. Please note that for the payment request \&quot;assets\&quot; and \&quot;registers\&quot; fields are not needed. For asset issuance request, \&quot;registers\&quot; field is not needed. You may specify boxes to spend by providing them in \&quot;inputsRaw\&quot;. Please note you need to have strict equality between input and output total amounts of Ergs in this case. If you want wallet to pick up the boxes, leave \&quot;inputsRaw\&quot; empty.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErgoTransaction)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<ErgoTransaction>> WalletTransactionGenerateWithHttpInfoAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestsHolder' is set
            if (requestsHolder == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'requestsHolder' when calling WalletApi->WalletTransactionGenerate");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestsHolder;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ErgoTransaction>("/wallet/transaction/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate and send arbitrary transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">See description of /wallet/transaction/generate</param>
        /// <returns>string</returns>
        public string WalletTransactionGenerateAndSend(RequestsHolder requestsHolder)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = WalletTransactionGenerateAndSendWithHttpInfo(requestsHolder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate and send arbitrary transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">See description of /wallet/transaction/generate</param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> WalletTransactionGenerateAndSendWithHttpInfo(RequestsHolder requestsHolder)
        {
            // verify the required parameter 'requestsHolder' is set
            if (requestsHolder == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'requestsHolder' when calling WalletApi->WalletTransactionGenerateAndSend");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestsHolder;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/wallet/transaction/send", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionGenerateAndSend", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate and send arbitrary transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">See description of /wallet/transaction/generate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> WalletTransactionGenerateAndSendAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await WalletTransactionGenerateAndSendWithHttpInfoAsync(requestsHolder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate and send arbitrary transaction 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">See description of /wallet/transaction/generate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> WalletTransactionGenerateAndSendWithHttpInfoAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestsHolder' is set
            if (requestsHolder == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'requestsHolder' when calling WalletApi->WalletTransactionGenerateAndSend");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestsHolder;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/wallet/transaction/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionGenerateAndSend", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign arbitrary unsigned transaction with wallet secrets and also secrets provided. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSigningRequest">With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported. Please note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \&quot;inputsRaw\&quot; and \&quot;dataInputsRaw\&quot; fields.</param>
        /// <returns>ErgoTransaction</returns>
        public ErgoTransaction WalletTransactionSign(TransactionSigningRequest transactionSigningRequest)
        {
            ErgoNode.Client.ApiResponse<ErgoTransaction> localVarResponse = WalletTransactionSignWithHttpInfo(transactionSigningRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign arbitrary unsigned transaction with wallet secrets and also secrets provided. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSigningRequest">With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported. Please note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \&quot;inputsRaw\&quot; and \&quot;dataInputsRaw\&quot; fields.</param>
        /// <returns>ApiResponse of ErgoTransaction</returns>
        public ErgoNode.Client.ApiResponse<ErgoTransaction> WalletTransactionSignWithHttpInfo(TransactionSigningRequest transactionSigningRequest)
        {
            // verify the required parameter 'transactionSigningRequest' is set
            if (transactionSigningRequest == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'transactionSigningRequest' when calling WalletApi->WalletTransactionSign");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionSigningRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ErgoTransaction>("/wallet/transaction/sign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionSign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign arbitrary unsigned transaction with wallet secrets and also secrets provided. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSigningRequest">With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported. Please note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \&quot;inputsRaw\&quot; and \&quot;dataInputsRaw\&quot; fields.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErgoTransaction</returns>
        public async System.Threading.Tasks.Task<ErgoTransaction> WalletTransactionSignAsync(TransactionSigningRequest transactionSigningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<ErgoTransaction> localVarResponse = await WalletTransactionSignWithHttpInfoAsync(transactionSigningRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign arbitrary unsigned transaction with wallet secrets and also secrets provided. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSigningRequest">With this API method an arbitrary unsigned transaction can be signed with secrets provided or stored in the wallet. Both DLOG and Diffie-Hellman tuple secrets are supported. Please note that the unsigned transaction contains only identifiers of inputs and data inputs. If the node holds UTXO set, it is able to extract boxes needed. Otherwise, input (and data-input) boxes can be provided in \&quot;inputsRaw\&quot; and \&quot;dataInputsRaw\&quot; fields.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErgoTransaction)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<ErgoTransaction>> WalletTransactionSignWithHttpInfoAsync(TransactionSigningRequest transactionSigningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionSigningRequest' is set
            if (transactionSigningRequest == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'transactionSigningRequest' when calling WalletApi->WalletTransactionSign");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transactionSigningRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ErgoTransaction>("/wallet/transaction/sign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionSign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all wallet-related transactions 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <returns>List&lt;WalletTransaction&gt;</returns>
        public List<WalletTransaction> WalletTransactions(int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?))
        {
            ErgoNode.Client.ApiResponse<List<WalletTransaction>> localVarResponse = WalletTransactionsWithHttpInfo(minInclusionHeight, maxInclusionHeight, minConfirmations, maxConfirmations);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all wallet-related transactions 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <returns>ApiResponse of List&lt;WalletTransaction&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<WalletTransaction>> WalletTransactionsWithHttpInfo(int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?))
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (minInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minInclusionHeight", minInclusionHeight));
            }
            if (maxInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "maxInclusionHeight", maxInclusionHeight));
            }
            if (minConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minConfirmations", minConfirmations));
            }
            if (maxConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "maxConfirmations", maxConfirmations));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WalletTransaction>>("/wallet/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all wallet-related transactions 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<WalletTransaction>> WalletTransactionsAsync(int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<WalletTransaction>> localVarResponse = await WalletTransactionsWithHttpInfoAsync(minInclusionHeight, maxInclusionHeight, minConfirmations, maxConfirmations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all wallet-related transactions 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<WalletTransaction>>> WalletTransactionsWithHttpInfoAsync(int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (minInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minInclusionHeight", minInclusionHeight));
            }
            if (maxInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "maxInclusionHeight", maxInclusionHeight));
            }
            if (minConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minConfirmations", minConfirmations));
            }
            if (maxConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "maxConfirmations", maxConfirmations));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WalletTransaction>>("/wallet/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get scan-related transactions by scan id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <returns>List&lt;WalletTransaction&gt;</returns>
        public List<WalletTransaction> WalletTransactionsByScanId(int scanId, int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?))
        {
            ErgoNode.Client.ApiResponse<List<WalletTransaction>> localVarResponse = WalletTransactionsByScanIdWithHttpInfo(scanId, minInclusionHeight, maxInclusionHeight, minConfirmations, maxConfirmations);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get scan-related transactions by scan id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <returns>ApiResponse of List&lt;WalletTransaction&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<WalletTransaction>> WalletTransactionsByScanIdWithHttpInfo(int scanId, int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?))
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scanId", ErgoNode.Client.ClientUtils.ParameterToString(scanId)); // path parameter
            if (minInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minInclusionHeight", minInclusionHeight));
            }
            if (maxInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "maxInclusionHeight", maxInclusionHeight));
            }
            if (minConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minConfirmations", minConfirmations));
            }
            if (maxConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "maxConfirmations", maxConfirmations));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WalletTransaction>>("/wallet/transactionsByScanId/{scanId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionsByScanId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get scan-related transactions by scan id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<WalletTransaction>> WalletTransactionsByScanIdAsync(int scanId, int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<WalletTransaction>> localVarResponse = await WalletTransactionsByScanIdWithHttpInfoAsync(scanId, minInclusionHeight, maxInclusionHeight, minConfirmations, maxConfirmations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get scan-related transactions by scan id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minInclusionHeight">Minimal tx inclusion height (optional)</param>
        /// <param name="maxInclusionHeight">Maximal tx inclusion height (optional)</param>
        /// <param name="minConfirmations">Minimal confirmations number (optional)</param>
        /// <param name="maxConfirmations">Maximal confirmations number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<WalletTransaction>>> WalletTransactionsByScanIdWithHttpInfoAsync(int scanId, int? minInclusionHeight = default(int?), int? maxInclusionHeight = default(int?), int? minConfirmations = default(int?), int? maxConfirmations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scanId", ErgoNode.Client.ClientUtils.ParameterToString(scanId)); // path parameter
            if (minInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minInclusionHeight", minInclusionHeight));
            }
            if (maxInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "maxInclusionHeight", maxInclusionHeight));
            }
            if (minConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minConfirmations", minConfirmations));
            }
            if (maxConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "maxConfirmations", maxConfirmations));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WalletTransaction>>("/wallet/transactionsByScanId/{scanId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionsByScanId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock wallet 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns></returns>
        public void WalletUnlock(InlineObject3 inlineObject3)
        {
            WalletUnlockWithHttpInfo(inlineObject3);
        }

        /// <summary>
        /// Unlock wallet 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ErgoNode.Client.ApiResponse<Object> WalletUnlockWithHttpInfo(InlineObject3 inlineObject3)
        {
            // verify the required parameter 'inlineObject3' is set
            if (inlineObject3 == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject3' when calling WalletApi->WalletUnlock");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject3;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/wallet/unlock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletUnlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock wallet 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WalletUnlockAsync(InlineObject3 inlineObject3, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WalletUnlockWithHttpInfoAsync(inlineObject3, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unlock wallet 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<Object>> WalletUnlockWithHttpInfoAsync(InlineObject3 inlineObject3, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlineObject3' is set
            if (inlineObject3 == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject3' when calling WalletApi->WalletUnlock");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject3;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/wallet/unlock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletUnlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate unsigned transaction from array of requests. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">The same as /wallet/transaction/generate but generates unsigned transaction.</param>
        /// <returns>UnsignedErgoTransaction</returns>
        public UnsignedErgoTransaction WalletUnsignedTransactionGenerate(RequestsHolder requestsHolder)
        {
            ErgoNode.Client.ApiResponse<UnsignedErgoTransaction> localVarResponse = WalletUnsignedTransactionGenerateWithHttpInfo(requestsHolder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate unsigned transaction from array of requests. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">The same as /wallet/transaction/generate but generates unsigned transaction.</param>
        /// <returns>ApiResponse of UnsignedErgoTransaction</returns>
        public ErgoNode.Client.ApiResponse<UnsignedErgoTransaction> WalletUnsignedTransactionGenerateWithHttpInfo(RequestsHolder requestsHolder)
        {
            // verify the required parameter 'requestsHolder' is set
            if (requestsHolder == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'requestsHolder' when calling WalletApi->WalletUnsignedTransactionGenerate");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestsHolder;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UnsignedErgoTransaction>("/wallet/transaction/generateUnsigned", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletUnsignedTransactionGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate unsigned transaction from array of requests. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">The same as /wallet/transaction/generate but generates unsigned transaction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnsignedErgoTransaction</returns>
        public async System.Threading.Tasks.Task<UnsignedErgoTransaction> WalletUnsignedTransactionGenerateAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<UnsignedErgoTransaction> localVarResponse = await WalletUnsignedTransactionGenerateWithHttpInfoAsync(requestsHolder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate unsigned transaction from array of requests. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestsHolder">The same as /wallet/transaction/generate but generates unsigned transaction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnsignedErgoTransaction)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<UnsignedErgoTransaction>> WalletUnsignedTransactionGenerateWithHttpInfoAsync(RequestsHolder requestsHolder, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestsHolder' is set
            if (requestsHolder == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'requestsHolder' when calling WalletApi->WalletUnsignedTransactionGenerate");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestsHolder;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UnsignedErgoTransaction>("/wallet/transaction/generateUnsigned", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletUnsignedTransactionGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>List&lt;WalletBox&gt;</returns>
        public List<WalletBox> WalletUnspentBoxes(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?))
        {
            ErgoNode.Client.ApiResponse<List<WalletBox>> localVarResponse = WalletUnspentBoxesWithHttpInfo(minConfirmations, minInclusionHeight);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;WalletBox&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<WalletBox>> WalletUnspentBoxesWithHttpInfo(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?))
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (minConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minConfirmations", minConfirmations));
            }
            if (minInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minInclusionHeight", minInclusionHeight));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WalletBox>>("/wallet/boxes/unspent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletUnspentBoxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletBox&gt;</returns>
        public async System.Threading.Tasks.Task<List<WalletBox>> WalletUnspentBoxesAsync(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<WalletBox>> localVarResponse = await WalletUnspentBoxesWithHttpInfoAsync(minConfirmations, minInclusionHeight, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletBox&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<WalletBox>>> WalletUnspentBoxesWithHttpInfoAsync(int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (minConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minConfirmations", minConfirmations));
            }
            if (minInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minInclusionHeight", minInclusionHeight));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WalletBox>>("/wallet/boxes/unspent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletUnspentBoxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update address to be used to send change to 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns></returns>
        public void WalletUpdateChangeAddress(InlineObject4 inlineObject4)
        {
            WalletUpdateChangeAddressWithHttpInfo(inlineObject4);
        }

        /// <summary>
        /// Update address to be used to send change to 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ErgoNode.Client.ApiResponse<Object> WalletUpdateChangeAddressWithHttpInfo(InlineObject4 inlineObject4)
        {
            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject4' when calling WalletApi->WalletUpdateChangeAddress");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject4;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/wallet/updateChangeAddress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletUpdateChangeAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update address to be used to send change to 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WalletUpdateChangeAddressAsync(InlineObject4 inlineObject4, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WalletUpdateChangeAddressWithHttpInfoAsync(inlineObject4, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update address to be used to send change to 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<Object>> WalletUpdateChangeAddressWithHttpInfoAsync(InlineObject4 inlineObject4, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'inlineObject4' when calling WalletApi->WalletUpdateChangeAddress");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject4;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/wallet/updateChangeAddress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletUpdateChangeAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
