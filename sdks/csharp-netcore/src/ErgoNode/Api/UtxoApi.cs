/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ErgoNode.Client;
using ErgoNode.Model;

namespace ErgoNode.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUtxoApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get genesis boxes (boxes existed before the very first block)
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ErgoTransactionOutput&gt;</returns>
        List<ErgoTransactionOutput> GenesisBoxes();

        /// <summary>
        /// Get genesis boxes (boxes existed before the very first block)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ErgoTransactionOutput&gt;</returns>
        ApiResponse<List<ErgoTransactionOutput>> GenesisBoxesWithHttpInfo();
        /// <summary>
        /// Get box contents for a box by a unique identifier.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>ErgoTransactionOutput</returns>
        ErgoTransactionOutput GetBoxById(string boxId);

        /// <summary>
        /// Get box contents for a box by a unique identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>ApiResponse of ErgoTransactionOutput</returns>
        ApiResponse<ErgoTransactionOutput> GetBoxByIdWithHttpInfo(string boxId);
        /// <summary>
        /// Get serialized box from UTXO pool in Base16 encoding by an identifier.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>SerializedBox</returns>
        SerializedBox GetBoxByIdBinary(string boxId);

        /// <summary>
        /// Get serialized box from UTXO pool in Base16 encoding by an identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>ApiResponse of SerializedBox</returns>
        ApiResponse<SerializedBox> GetBoxByIdBinaryWithHttpInfo(string boxId);
        /// <summary>
        /// Get box contents for a box by a unique identifier, from UTXO set and also the mempool.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a box to obtain</param>
        /// <returns>ErgoTransactionOutput</returns>
        ErgoTransactionOutput GetBoxWithPoolById(string boxId);

        /// <summary>
        /// Get box contents for a box by a unique identifier, from UTXO set and also the mempool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a box to obtain</param>
        /// <returns>ApiResponse of ErgoTransactionOutput</returns>
        ApiResponse<ErgoTransactionOutput> GetBoxWithPoolByIdWithHttpInfo(string boxId);
        /// <summary>
        /// Get serialized box in Base16 encoding by an identifier, considering also the mempool.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>SerializedBox</returns>
        SerializedBox GetBoxWithPoolByIdBinary(string boxId);

        /// <summary>
        /// Get serialized box in Base16 encoding by an identifier, considering also the mempool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>ApiResponse of SerializedBox</returns>
        ApiResponse<SerializedBox> GetBoxWithPoolByIdBinaryWithHttpInfo(string boxId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUtxoApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get genesis boxes (boxes existed before the very first block)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ErgoTransactionOutput&gt;</returns>
        System.Threading.Tasks.Task<List<ErgoTransactionOutput>> GenesisBoxesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get genesis boxes (boxes existed before the very first block)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ErgoTransactionOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ErgoTransactionOutput>>> GenesisBoxesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get box contents for a box by a unique identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErgoTransactionOutput</returns>
        System.Threading.Tasks.Task<ErgoTransactionOutput> GetBoxByIdAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get box contents for a box by a unique identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErgoTransactionOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ErgoTransactionOutput>> GetBoxByIdWithHttpInfoAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get serialized box from UTXO pool in Base16 encoding by an identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SerializedBox</returns>
        System.Threading.Tasks.Task<SerializedBox> GetBoxByIdBinaryAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get serialized box from UTXO pool in Base16 encoding by an identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SerializedBox)</returns>
        System.Threading.Tasks.Task<ApiResponse<SerializedBox>> GetBoxByIdBinaryWithHttpInfoAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get box contents for a box by a unique identifier, from UTXO set and also the mempool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a box to obtain</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErgoTransactionOutput</returns>
        System.Threading.Tasks.Task<ErgoTransactionOutput> GetBoxWithPoolByIdAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get box contents for a box by a unique identifier, from UTXO set and also the mempool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a box to obtain</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErgoTransactionOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<ErgoTransactionOutput>> GetBoxWithPoolByIdWithHttpInfoAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get serialized box in Base16 encoding by an identifier, considering also the mempool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SerializedBox</returns>
        System.Threading.Tasks.Task<SerializedBox> GetBoxWithPoolByIdBinaryAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get serialized box in Base16 encoding by an identifier, considering also the mempool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SerializedBox)</returns>
        System.Threading.Tasks.Task<ApiResponse<SerializedBox>> GetBoxWithPoolByIdBinaryWithHttpInfoAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUtxoApi : IUtxoApiSync, IUtxoApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UtxoApi : IUtxoApi
    {
        private ErgoNode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UtxoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtxoApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtxoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtxoApi(string basePath)
        {
            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                new ErgoNode.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtxoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UtxoApi(ErgoNode.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtxoApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UtxoApi(ErgoNode.Client.ISynchronousClient client, ErgoNode.Client.IAsynchronousClient asyncClient, ErgoNode.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ErgoNode.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ErgoNode.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ErgoNode.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ErgoNode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get genesis boxes (boxes existed before the very first block) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ErgoTransactionOutput&gt;</returns>
        public List<ErgoTransactionOutput> GenesisBoxes()
        {
            ErgoNode.Client.ApiResponse<List<ErgoTransactionOutput>> localVarResponse = GenesisBoxesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get genesis boxes (boxes existed before the very first block) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ErgoTransactionOutput&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<ErgoTransactionOutput>> GenesisBoxesWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ErgoTransactionOutput>>("/utxo/genesis", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenesisBoxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get genesis boxes (boxes existed before the very first block) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ErgoTransactionOutput&gt;</returns>
        public async System.Threading.Tasks.Task<List<ErgoTransactionOutput>> GenesisBoxesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<ErgoTransactionOutput>> localVarResponse = await GenesisBoxesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get genesis boxes (boxes existed before the very first block) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ErgoTransactionOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<ErgoTransactionOutput>>> GenesisBoxesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ErgoTransactionOutput>>("/utxo/genesis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenesisBoxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get box contents for a box by a unique identifier. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>ErgoTransactionOutput</returns>
        public ErgoTransactionOutput GetBoxById(string boxId)
        {
            ErgoNode.Client.ApiResponse<ErgoTransactionOutput> localVarResponse = GetBoxByIdWithHttpInfo(boxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get box contents for a box by a unique identifier. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>ApiResponse of ErgoTransactionOutput</returns>
        public ErgoNode.Client.ApiResponse<ErgoTransactionOutput> GetBoxByIdWithHttpInfo(string boxId)
        {
            // verify the required parameter 'boxId' is set
            if (boxId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'boxId' when calling UtxoApi->GetBoxById");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("boxId", ErgoNode.Client.ClientUtils.ParameterToString(boxId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ErgoTransactionOutput>("/utxo/byId/{boxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBoxById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get box contents for a box by a unique identifier. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErgoTransactionOutput</returns>
        public async System.Threading.Tasks.Task<ErgoTransactionOutput> GetBoxByIdAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<ErgoTransactionOutput> localVarResponse = await GetBoxByIdWithHttpInfoAsync(boxId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get box contents for a box by a unique identifier. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErgoTransactionOutput)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<ErgoTransactionOutput>> GetBoxByIdWithHttpInfoAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'boxId' is set
            if (boxId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'boxId' when calling UtxoApi->GetBoxById");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("boxId", ErgoNode.Client.ClientUtils.ParameterToString(boxId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ErgoTransactionOutput>("/utxo/byId/{boxId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBoxById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get serialized box from UTXO pool in Base16 encoding by an identifier. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>SerializedBox</returns>
        public SerializedBox GetBoxByIdBinary(string boxId)
        {
            ErgoNode.Client.ApiResponse<SerializedBox> localVarResponse = GetBoxByIdBinaryWithHttpInfo(boxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get serialized box from UTXO pool in Base16 encoding by an identifier. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>ApiResponse of SerializedBox</returns>
        public ErgoNode.Client.ApiResponse<SerializedBox> GetBoxByIdBinaryWithHttpInfo(string boxId)
        {
            // verify the required parameter 'boxId' is set
            if (boxId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'boxId' when calling UtxoApi->GetBoxByIdBinary");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("boxId", ErgoNode.Client.ClientUtils.ParameterToString(boxId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SerializedBox>("/utxo/byIdBinary/{boxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBoxByIdBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get serialized box from UTXO pool in Base16 encoding by an identifier. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SerializedBox</returns>
        public async System.Threading.Tasks.Task<SerializedBox> GetBoxByIdBinaryAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<SerializedBox> localVarResponse = await GetBoxByIdBinaryWithHttpInfoAsync(boxId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get serialized box from UTXO pool in Base16 encoding by an identifier. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SerializedBox)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<SerializedBox>> GetBoxByIdBinaryWithHttpInfoAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'boxId' is set
            if (boxId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'boxId' when calling UtxoApi->GetBoxByIdBinary");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("boxId", ErgoNode.Client.ClientUtils.ParameterToString(boxId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SerializedBox>("/utxo/byIdBinary/{boxId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBoxByIdBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get box contents for a box by a unique identifier, from UTXO set and also the mempool. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a box to obtain</param>
        /// <returns>ErgoTransactionOutput</returns>
        public ErgoTransactionOutput GetBoxWithPoolById(string boxId)
        {
            ErgoNode.Client.ApiResponse<ErgoTransactionOutput> localVarResponse = GetBoxWithPoolByIdWithHttpInfo(boxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get box contents for a box by a unique identifier, from UTXO set and also the mempool. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a box to obtain</param>
        /// <returns>ApiResponse of ErgoTransactionOutput</returns>
        public ErgoNode.Client.ApiResponse<ErgoTransactionOutput> GetBoxWithPoolByIdWithHttpInfo(string boxId)
        {
            // verify the required parameter 'boxId' is set
            if (boxId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'boxId' when calling UtxoApi->GetBoxWithPoolById");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("boxId", ErgoNode.Client.ClientUtils.ParameterToString(boxId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ErgoTransactionOutput>("/utxo/withPool/byId/{boxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBoxWithPoolById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get box contents for a box by a unique identifier, from UTXO set and also the mempool. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a box to obtain</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ErgoTransactionOutput</returns>
        public async System.Threading.Tasks.Task<ErgoTransactionOutput> GetBoxWithPoolByIdAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<ErgoTransactionOutput> localVarResponse = await GetBoxWithPoolByIdWithHttpInfoAsync(boxId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get box contents for a box by a unique identifier, from UTXO set and also the mempool. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a box to obtain</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ErgoTransactionOutput)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<ErgoTransactionOutput>> GetBoxWithPoolByIdWithHttpInfoAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'boxId' is set
            if (boxId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'boxId' when calling UtxoApi->GetBoxWithPoolById");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("boxId", ErgoNode.Client.ClientUtils.ParameterToString(boxId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ErgoTransactionOutput>("/utxo/withPool/byId/{boxId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBoxWithPoolById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get serialized box in Base16 encoding by an identifier, considering also the mempool. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>SerializedBox</returns>
        public SerializedBox GetBoxWithPoolByIdBinary(string boxId)
        {
            ErgoNode.Client.ApiResponse<SerializedBox> localVarResponse = GetBoxWithPoolByIdBinaryWithHttpInfo(boxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get serialized box in Base16 encoding by an identifier, considering also the mempool. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <returns>ApiResponse of SerializedBox</returns>
        public ErgoNode.Client.ApiResponse<SerializedBox> GetBoxWithPoolByIdBinaryWithHttpInfo(string boxId)
        {
            // verify the required parameter 'boxId' is set
            if (boxId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'boxId' when calling UtxoApi->GetBoxWithPoolByIdBinary");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("boxId", ErgoNode.Client.ClientUtils.ParameterToString(boxId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SerializedBox>("/utxo/withPool/byIdBinary/{boxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBoxWithPoolByIdBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get serialized box in Base16 encoding by an identifier, considering also the mempool. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SerializedBox</returns>
        public async System.Threading.Tasks.Task<SerializedBox> GetBoxWithPoolByIdBinaryAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<SerializedBox> localVarResponse = await GetBoxWithPoolByIdBinaryWithHttpInfoAsync(boxId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get serialized box in Base16 encoding by an identifier, considering also the mempool. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boxId">ID of a wanted box</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SerializedBox)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<SerializedBox>> GetBoxWithPoolByIdBinaryWithHttpInfoAsync(string boxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'boxId' is set
            if (boxId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'boxId' when calling UtxoApi->GetBoxWithPoolByIdBinary");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("boxId", ErgoNode.Client.ClientUtils.ParameterToString(boxId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SerializedBox>("/utxo/withPool/byIdBinary/{boxId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBoxWithPoolByIdBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
