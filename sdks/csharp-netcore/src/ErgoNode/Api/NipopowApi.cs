/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ErgoNode.Client;
using ErgoNode.Model;

namespace ErgoNode.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INipopowApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Construct PoPow header for best header at given height
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Height of a wanted header</param>
        /// <returns>PopowHeader</returns>
        PopowHeader GetPopowHeaderByHeight(int height);

        /// <summary>
        /// Construct PoPow header for best header at given height
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Height of a wanted header</param>
        /// <returns>ApiResponse of PopowHeader</returns>
        ApiResponse<PopowHeader> GetPopowHeaderByHeightWithHttpInfo(int height);
        /// <summary>
        /// Construct PoPow header according to given header id
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of wanted header</param>
        /// <returns>PopowHeader</returns>
        PopowHeader GetPopowHeaderById(string headerId);

        /// <summary>
        /// Construct PoPow header according to given header id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of wanted header</param>
        /// <returns>ApiResponse of PopowHeader</returns>
        ApiResponse<PopowHeader> GetPopowHeaderByIdWithHttpInfo(string headerId);
        /// <summary>
        /// Construct PoPoW proof for given min superchain length and suffix length
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <returns>NipopowProof</returns>
        NipopowProof GetPopowProof(decimal minChainLength, decimal suffixLength);

        /// <summary>
        /// Construct PoPoW proof for given min superchain length and suffix length
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <returns>ApiResponse of NipopowProof</returns>
        ApiResponse<NipopowProof> GetPopowProofWithHttpInfo(decimal minChainLength, decimal suffixLength);
        /// <summary>
        /// Construct PoPoW proof for given min superchain length, suffix length and header ID
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="headerId">ID of wanted header</param>
        /// <returns>NipopowProof</returns>
        NipopowProof GetPopowProofByHeaderId(decimal minChainLength, decimal suffixLength, string headerId);

        /// <summary>
        /// Construct PoPoW proof for given min superchain length, suffix length and header ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="headerId">ID of wanted header</param>
        /// <returns>ApiResponse of NipopowProof</returns>
        ApiResponse<NipopowProof> GetPopowProofByHeaderIdWithHttpInfo(decimal minChainLength, decimal suffixLength, string headerId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INipopowApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Construct PoPow header for best header at given height
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Height of a wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PopowHeader</returns>
        System.Threading.Tasks.Task<PopowHeader> GetPopowHeaderByHeightAsync(int height, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Construct PoPow header for best header at given height
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Height of a wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PopowHeader)</returns>
        System.Threading.Tasks.Task<ApiResponse<PopowHeader>> GetPopowHeaderByHeightWithHttpInfoAsync(int height, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Construct PoPow header according to given header id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PopowHeader</returns>
        System.Threading.Tasks.Task<PopowHeader> GetPopowHeaderByIdAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Construct PoPow header according to given header id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PopowHeader)</returns>
        System.Threading.Tasks.Task<ApiResponse<PopowHeader>> GetPopowHeaderByIdWithHttpInfoAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Construct PoPoW proof for given min superchain length and suffix length
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NipopowProof</returns>
        System.Threading.Tasks.Task<NipopowProof> GetPopowProofAsync(decimal minChainLength, decimal suffixLength, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Construct PoPoW proof for given min superchain length and suffix length
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NipopowProof)</returns>
        System.Threading.Tasks.Task<ApiResponse<NipopowProof>> GetPopowProofWithHttpInfoAsync(decimal minChainLength, decimal suffixLength, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Construct PoPoW proof for given min superchain length, suffix length and header ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="headerId">ID of wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NipopowProof</returns>
        System.Threading.Tasks.Task<NipopowProof> GetPopowProofByHeaderIdAsync(decimal minChainLength, decimal suffixLength, string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Construct PoPoW proof for given min superchain length, suffix length and header ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="headerId">ID of wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NipopowProof)</returns>
        System.Threading.Tasks.Task<ApiResponse<NipopowProof>> GetPopowProofByHeaderIdWithHttpInfoAsync(decimal minChainLength, decimal suffixLength, string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INipopowApi : INipopowApiSync, INipopowApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NipopowApi : INipopowApi
    {
        private ErgoNode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NipopowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NipopowApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NipopowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NipopowApi(string basePath)
        {
            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                new ErgoNode.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NipopowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NipopowApi(ErgoNode.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NipopowApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NipopowApi(ErgoNode.Client.ISynchronousClient client, ErgoNode.Client.IAsynchronousClient asyncClient, ErgoNode.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ErgoNode.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ErgoNode.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ErgoNode.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ErgoNode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Construct PoPow header for best header at given height 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Height of a wanted header</param>
        /// <returns>PopowHeader</returns>
        public PopowHeader GetPopowHeaderByHeight(int height)
        {
            ErgoNode.Client.ApiResponse<PopowHeader> localVarResponse = GetPopowHeaderByHeightWithHttpInfo(height);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Construct PoPow header for best header at given height 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Height of a wanted header</param>
        /// <returns>ApiResponse of PopowHeader</returns>
        public ErgoNode.Client.ApiResponse<PopowHeader> GetPopowHeaderByHeightWithHttpInfo(int height)
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("height", ErgoNode.Client.ClientUtils.ParameterToString(height)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PopowHeader>("/nipopow/popowHeaderByHeight/{height}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPopowHeaderByHeight", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Construct PoPow header for best header at given height 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Height of a wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PopowHeader</returns>
        public async System.Threading.Tasks.Task<PopowHeader> GetPopowHeaderByHeightAsync(int height, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<PopowHeader> localVarResponse = await GetPopowHeaderByHeightWithHttpInfoAsync(height, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Construct PoPow header for best header at given height 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Height of a wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PopowHeader)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<PopowHeader>> GetPopowHeaderByHeightWithHttpInfoAsync(int height, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("height", ErgoNode.Client.ClientUtils.ParameterToString(height)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PopowHeader>("/nipopow/popowHeaderByHeight/{height}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPopowHeaderByHeight", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Construct PoPow header according to given header id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of wanted header</param>
        /// <returns>PopowHeader</returns>
        public PopowHeader GetPopowHeaderById(string headerId)
        {
            ErgoNode.Client.ApiResponse<PopowHeader> localVarResponse = GetPopowHeaderByIdWithHttpInfo(headerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Construct PoPow header according to given header id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of wanted header</param>
        /// <returns>ApiResponse of PopowHeader</returns>
        public ErgoNode.Client.ApiResponse<PopowHeader> GetPopowHeaderByIdWithHttpInfo(string headerId)
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling NipopowApi->GetPopowHeaderById");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PopowHeader>("/nipopow/popowHeaderById/{headerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPopowHeaderById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Construct PoPow header according to given header id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PopowHeader</returns>
        public async System.Threading.Tasks.Task<PopowHeader> GetPopowHeaderByIdAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<PopowHeader> localVarResponse = await GetPopowHeaderByIdWithHttpInfoAsync(headerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Construct PoPow header according to given header id 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headerId">ID of wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PopowHeader)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<PopowHeader>> GetPopowHeaderByIdWithHttpInfoAsync(string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling NipopowApi->GetPopowHeaderById");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PopowHeader>("/nipopow/popowHeaderById/{headerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPopowHeaderById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Construct PoPoW proof for given min superchain length and suffix length 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <returns>NipopowProof</returns>
        public NipopowProof GetPopowProof(decimal minChainLength, decimal suffixLength)
        {
            ErgoNode.Client.ApiResponse<NipopowProof> localVarResponse = GetPopowProofWithHttpInfo(minChainLength, suffixLength);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Construct PoPoW proof for given min superchain length and suffix length 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <returns>ApiResponse of NipopowProof</returns>
        public ErgoNode.Client.ApiResponse<NipopowProof> GetPopowProofWithHttpInfo(decimal minChainLength, decimal suffixLength)
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("minChainLength", ErgoNode.Client.ClientUtils.ParameterToString(minChainLength)); // path parameter
            localVarRequestOptions.PathParameters.Add("suffixLength", ErgoNode.Client.ClientUtils.ParameterToString(suffixLength)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<NipopowProof>("/nipopow/proof/{minChainLength}/{suffixLength}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPopowProof", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Construct PoPoW proof for given min superchain length and suffix length 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NipopowProof</returns>
        public async System.Threading.Tasks.Task<NipopowProof> GetPopowProofAsync(decimal minChainLength, decimal suffixLength, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<NipopowProof> localVarResponse = await GetPopowProofWithHttpInfoAsync(minChainLength, suffixLength, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Construct PoPoW proof for given min superchain length and suffix length 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NipopowProof)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<NipopowProof>> GetPopowProofWithHttpInfoAsync(decimal minChainLength, decimal suffixLength, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("minChainLength", ErgoNode.Client.ClientUtils.ParameterToString(minChainLength)); // path parameter
            localVarRequestOptions.PathParameters.Add("suffixLength", ErgoNode.Client.ClientUtils.ParameterToString(suffixLength)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NipopowProof>("/nipopow/proof/{minChainLength}/{suffixLength}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPopowProof", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Construct PoPoW proof for given min superchain length, suffix length and header ID 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="headerId">ID of wanted header</param>
        /// <returns>NipopowProof</returns>
        public NipopowProof GetPopowProofByHeaderId(decimal minChainLength, decimal suffixLength, string headerId)
        {
            ErgoNode.Client.ApiResponse<NipopowProof> localVarResponse = GetPopowProofByHeaderIdWithHttpInfo(minChainLength, suffixLength, headerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Construct PoPoW proof for given min superchain length, suffix length and header ID 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="headerId">ID of wanted header</param>
        /// <returns>ApiResponse of NipopowProof</returns>
        public ErgoNode.Client.ApiResponse<NipopowProof> GetPopowProofByHeaderIdWithHttpInfo(decimal minChainLength, decimal suffixLength, string headerId)
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling NipopowApi->GetPopowProofByHeaderId");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("minChainLength", ErgoNode.Client.ClientUtils.ParameterToString(minChainLength)); // path parameter
            localVarRequestOptions.PathParameters.Add("suffixLength", ErgoNode.Client.ClientUtils.ParameterToString(suffixLength)); // path parameter
            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<NipopowProof>("/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPopowProofByHeaderId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Construct PoPoW proof for given min superchain length, suffix length and header ID 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="headerId">ID of wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NipopowProof</returns>
        public async System.Threading.Tasks.Task<NipopowProof> GetPopowProofByHeaderIdAsync(decimal minChainLength, decimal suffixLength, string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<NipopowProof> localVarResponse = await GetPopowProofByHeaderIdWithHttpInfoAsync(minChainLength, suffixLength, headerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Construct PoPoW proof for given min superchain length, suffix length and header ID 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minChainLength">Minimal superchain length</param>
        /// <param name="suffixLength">Suffix length</param>
        /// <param name="headerId">ID of wanted header</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NipopowProof)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<NipopowProof>> GetPopowProofByHeaderIdWithHttpInfoAsync(decimal minChainLength, decimal suffixLength, string headerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'headerId' is set
            if (headerId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'headerId' when calling NipopowApi->GetPopowProofByHeaderId");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("minChainLength", ErgoNode.Client.ClientUtils.ParameterToString(minChainLength)); // path parameter
            localVarRequestOptions.PathParameters.Add("suffixLength", ErgoNode.Client.ClientUtils.ParameterToString(suffixLength)); // path parameter
            localVarRequestOptions.PathParameters.Add("headerId", ErgoNode.Client.ClientUtils.ParameterToString(headerId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NipopowProof>("/nipopow/proof/{minChainLength}/{suffixLength}/{headerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPopowProofByHeaderId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
