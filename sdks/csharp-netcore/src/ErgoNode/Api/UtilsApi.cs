/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ErgoNode.Client;
using ErgoNode.Model;

namespace ErgoNode.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUtilsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point)
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to extract public key from</param>
        /// <returns>string</returns>
        string AddressToRaw(string address);

        /// <summary>
        /// Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to extract public key from</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddressToRawWithHttpInfo(string address);
        /// <summary>
        /// Check address validity
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to check</param>
        /// <returns>AddressValidity</returns>
        AddressValidity CheckAddressValidity(string address);

        /// <summary>
        /// Check address validity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to check</param>
        /// <returns>ApiResponse of AddressValidity</returns>
        ApiResponse<AddressValidity> CheckAddressValidityWithHttpInfo(string address);
        /// <summary>
        /// Generate Ergo address from hex-encoded ErgoTree
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTreeHex">ErgoTree to derive an address from</param>
        /// <returns>string</returns>
        string ErgoTreeToAddress(string ergoTreeHex);

        /// <summary>
        /// Generate Ergo address from hex-encoded ErgoTree
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTreeHex">ErgoTree to derive an address from</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ErgoTreeToAddressWithHttpInfo(string ergoTreeHex);
        /// <summary>
        /// Get random seed of 32 bytes
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string GetRandomSeed();

        /// <summary>
        /// Get random seed of 32 bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetRandomSeedWithHttpInfo();
        /// <summary>
        /// Generate random seed of specified length in bytes
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="length">seed length in bytes</param>
        /// <returns>string</returns>
        string GetRandomSeedWithLength(string length);

        /// <summary>
        /// Generate random seed of specified length in bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="length">seed length in bytes</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetRandomSeedWithLengthWithHttpInfo(string length);
        /// <summary>
        /// Return Blake2b hash of specified message
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>string</returns>
        string HashBlake2b(string body);

        /// <summary>
        /// Return Blake2b hash of specified message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> HashBlake2bWithHttpInfo(string body);
        /// <summary>
        /// Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point)
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubkeyHex">public key to get address from</param>
        /// <returns>string</returns>
        string RawToAddress(string pubkeyHex);

        /// <summary>
        /// Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubkeyHex">public key to get address from</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RawToAddressWithHttpInfo(string pubkeyHex);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUtilsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to extract public key from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddressToRawAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to extract public key from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddressToRawWithHttpInfoAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check address validity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressValidity</returns>
        System.Threading.Tasks.Task<AddressValidity> CheckAddressValidityAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check address validity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressValidity)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressValidity>> CheckAddressValidityWithHttpInfoAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate Ergo address from hex-encoded ErgoTree
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTreeHex">ErgoTree to derive an address from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ErgoTreeToAddressAsync(string ergoTreeHex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate Ergo address from hex-encoded ErgoTree
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTreeHex">ErgoTree to derive an address from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ErgoTreeToAddressWithHttpInfoAsync(string ergoTreeHex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get random seed of 32 bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetRandomSeedAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get random seed of 32 bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetRandomSeedWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate random seed of specified length in bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="length">seed length in bytes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetRandomSeedWithLengthAsync(string length, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate random seed of specified length in bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="length">seed length in bytes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetRandomSeedWithLengthWithHttpInfoAsync(string length, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return Blake2b hash of specified message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> HashBlake2bAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return Blake2b hash of specified message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> HashBlake2bWithHttpInfoAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubkeyHex">public key to get address from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RawToAddressAsync(string pubkeyHex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubkeyHex">public key to get address from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RawToAddressWithHttpInfoAsync(string pubkeyHex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUtilsApi : IUtilsApiSync, IUtilsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UtilsApi : IUtilsApi
    {
        private ErgoNode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtilsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtilsApi(string basePath)
        {
            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                new ErgoNode.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UtilsApi(ErgoNode.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UtilsApi(ErgoNode.Client.ISynchronousClient client, ErgoNode.Client.IAsynchronousClient asyncClient, ErgoNode.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ErgoNode.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ErgoNode.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ErgoNode.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ErgoNode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to extract public key from</param>
        /// <returns>string</returns>
        public string AddressToRaw(string address)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = AddressToRawWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to extract public key from</param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> AddressToRawWithHttpInfo(string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'address' when calling UtilsApi->AddressToRaw");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", ErgoNode.Client.ClientUtils.ParameterToString(address)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/utils/addressToRaw/{address}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressToRaw", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to extract public key from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddressToRawAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await AddressToRawWithHttpInfoAsync(address, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Pay-To-Public-Key Address to raw representation (hex-encoded serialized curve point) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to extract public key from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> AddressToRawWithHttpInfoAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'address' when calling UtilsApi->AddressToRaw");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", ErgoNode.Client.ClientUtils.ParameterToString(address)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/utils/addressToRaw/{address}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressToRaw", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check address validity 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to check</param>
        /// <returns>AddressValidity</returns>
        public AddressValidity CheckAddressValidity(string address)
        {
            ErgoNode.Client.ApiResponse<AddressValidity> localVarResponse = CheckAddressValidityWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check address validity 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to check</param>
        /// <returns>ApiResponse of AddressValidity</returns>
        public ErgoNode.Client.ApiResponse<AddressValidity> CheckAddressValidityWithHttpInfo(string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'address' when calling UtilsApi->CheckAddressValidity");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", ErgoNode.Client.ClientUtils.ParameterToString(address)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressValidity>("/utils/address/{address}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckAddressValidity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check address validity 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressValidity</returns>
        public async System.Threading.Tasks.Task<AddressValidity> CheckAddressValidityAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<AddressValidity> localVarResponse = await CheckAddressValidityWithHttpInfoAsync(address, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check address validity 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressValidity)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<AddressValidity>> CheckAddressValidityWithHttpInfoAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'address' when calling UtilsApi->CheckAddressValidity");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", ErgoNode.Client.ClientUtils.ParameterToString(address)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressValidity>("/utils/address/{address}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckAddressValidity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Ergo address from hex-encoded ErgoTree 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTreeHex">ErgoTree to derive an address from</param>
        /// <returns>string</returns>
        public string ErgoTreeToAddress(string ergoTreeHex)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = ErgoTreeToAddressWithHttpInfo(ergoTreeHex);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Ergo address from hex-encoded ErgoTree 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTreeHex">ErgoTree to derive an address from</param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> ErgoTreeToAddressWithHttpInfo(string ergoTreeHex)
        {
            // verify the required parameter 'ergoTreeHex' is set
            if (ergoTreeHex == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'ergoTreeHex' when calling UtilsApi->ErgoTreeToAddress");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ergoTreeHex", ErgoNode.Client.ClientUtils.ParameterToString(ergoTreeHex)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/utils/ergoTreeToAddress/{ergoTreeHex}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ErgoTreeToAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Ergo address from hex-encoded ErgoTree 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTreeHex">ErgoTree to derive an address from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ErgoTreeToAddressAsync(string ergoTreeHex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await ErgoTreeToAddressWithHttpInfoAsync(ergoTreeHex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Ergo address from hex-encoded ErgoTree 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTreeHex">ErgoTree to derive an address from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> ErgoTreeToAddressWithHttpInfoAsync(string ergoTreeHex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ergoTreeHex' is set
            if (ergoTreeHex == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'ergoTreeHex' when calling UtilsApi->ErgoTreeToAddress");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ergoTreeHex", ErgoNode.Client.ClientUtils.ParameterToString(ergoTreeHex)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/utils/ergoTreeToAddress/{ergoTreeHex}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ErgoTreeToAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get random seed of 32 bytes 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string GetRandomSeed()
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = GetRandomSeedWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get random seed of 32 bytes 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> GetRandomSeedWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/utils/seed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomSeed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get random seed of 32 bytes 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetRandomSeedAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await GetRandomSeedWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get random seed of 32 bytes 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> GetRandomSeedWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/utils/seed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomSeed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate random seed of specified length in bytes 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="length">seed length in bytes</param>
        /// <returns>string</returns>
        public string GetRandomSeedWithLength(string length)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = GetRandomSeedWithLengthWithHttpInfo(length);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate random seed of specified length in bytes 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="length">seed length in bytes</param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> GetRandomSeedWithLengthWithHttpInfo(string length)
        {
            // verify the required parameter 'length' is set
            if (length == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'length' when calling UtilsApi->GetRandomSeedWithLength");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("length", ErgoNode.Client.ClientUtils.ParameterToString(length)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/utils/seed/{length}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomSeedWithLength", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate random seed of specified length in bytes 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="length">seed length in bytes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetRandomSeedWithLengthAsync(string length, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await GetRandomSeedWithLengthWithHttpInfoAsync(length, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate random seed of specified length in bytes 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="length">seed length in bytes</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> GetRandomSeedWithLengthWithHttpInfoAsync(string length, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'length' is set
            if (length == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'length' when calling UtilsApi->GetRandomSeedWithLength");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("length", ErgoNode.Client.ClientUtils.ParameterToString(length)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/utils/seed/{length}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomSeedWithLength", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Blake2b hash of specified message 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>string</returns>
        public string HashBlake2b(string body)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = HashBlake2bWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Blake2b hash of specified message 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> HashBlake2bWithHttpInfo(string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'body' when calling UtilsApi->HashBlake2b");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/utils/hash/blake2b", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HashBlake2b", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Blake2b hash of specified message 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> HashBlake2bAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await HashBlake2bWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Blake2b hash of specified message 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> HashBlake2bWithHttpInfoAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'body' when calling UtilsApi->HashBlake2b");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/utils/hash/blake2b", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HashBlake2b", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubkeyHex">public key to get address from</param>
        /// <returns>string</returns>
        public string RawToAddress(string pubkeyHex)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = RawToAddressWithHttpInfo(pubkeyHex);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubkeyHex">public key to get address from</param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> RawToAddressWithHttpInfo(string pubkeyHex)
        {
            // verify the required parameter 'pubkeyHex' is set
            if (pubkeyHex == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'pubkeyHex' when calling UtilsApi->RawToAddress");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pubkeyHex", ErgoNode.Client.ClientUtils.ParameterToString(pubkeyHex)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/utils/rawToAddress/{pubkeyHex}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RawToAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubkeyHex">public key to get address from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RawToAddressAsync(string pubkeyHex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await RawToAddressWithHttpInfoAsync(pubkeyHex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Pay-To-Public-Key address from hex-encoded raw pubkey (secp256k1 serialized point) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubkeyHex">public key to get address from</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> RawToAddressWithHttpInfoAsync(string pubkeyHex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pubkeyHex' is set
            if (pubkeyHex == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'pubkeyHex' when calling UtilsApi->RawToAddress");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pubkeyHex", ErgoNode.Client.ClientUtils.ParameterToString(pubkeyHex)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/utils/rawToAddress/{pubkeyHex}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RawToAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
