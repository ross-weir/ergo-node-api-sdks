/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ErgoNode.Client;
using ErgoNode.Model;

namespace ErgoNode.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScanApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <returns>string</returns>
        string AddBox(ScanIdsBox scanIdsBox);

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddBoxWithHttpInfo(ScanIdsBox scanIdsBox);
        /// <summary>
        /// Stop tracking and deregister scan
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId"></param>
        /// <returns>ScanId</returns>
        ScanId DeregisterScan(ScanId scanId);

        /// <summary>
        /// Stop tracking and deregister scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId"></param>
        /// <returns>ApiResponse of ScanId</returns>
        ApiResponse<ScanId> DeregisterScanWithHttpInfo(ScanId scanId);
        /// <summary>
        /// List all the registered scans
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Scan&gt;</returns>
        List<Scan> ListAllScans();

        /// <summary>
        /// List all the registered scans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Scan&gt;</returns>
        ApiResponse<List<Scan>> ListAllScansWithHttpInfo();
        /// <summary>
        /// List boxes which are not spent.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>List&lt;WalletBox&gt;</returns>
        List<WalletBox> ListUnspentScans(int scanId, int? minConfirmations = default(int?), int? minInclusionHeight = default(int?));

        /// <summary>
        /// List boxes which are not spent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;WalletBox&gt;</returns>
        ApiResponse<List<WalletBox>> ListUnspentScansWithHttpInfo(int scanId, int? minConfirmations = default(int?), int? minInclusionHeight = default(int?));
        /// <summary>
        /// Register a scan
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanRequest"></param>
        /// <returns>ScanId</returns>
        ScanId RegisterScan(ScanRequest scanRequest);

        /// <summary>
        /// Register a scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanRequest"></param>
        /// <returns>ApiResponse of ScanId</returns>
        ApiResponse<ScanId> RegisterScanWithHttpInfo(ScanRequest scanRequest);
        /// <summary>
        /// Stop scan-related box tracking
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdBoxId"></param>
        /// <returns>ScanIdBoxId</returns>
        ScanIdBoxId ScanStopTracking(ScanIdBoxId scanIdBoxId);

        /// <summary>
        /// Stop scan-related box tracking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdBoxId"></param>
        /// <returns>ApiResponse of ScanIdBoxId</returns>
        ApiResponse<ScanIdBoxId> ScanStopTrackingWithHttpInfo(ScanIdBoxId scanIdBoxId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScanApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddBoxAsync(ScanIdsBox scanIdsBox, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddBoxWithHttpInfoAsync(ScanIdsBox scanIdsBox, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop tracking and deregister scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanId</returns>
        System.Threading.Tasks.Task<ScanId> DeregisterScanAsync(ScanId scanId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop tracking and deregister scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanId)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScanId>> DeregisterScanWithHttpInfoAsync(ScanId scanId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all the registered scans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Scan&gt;</returns>
        System.Threading.Tasks.Task<List<Scan>> ListAllScansAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all the registered scans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Scan&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Scan>>> ListAllScansWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List boxes which are not spent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletBox&gt;</returns>
        System.Threading.Tasks.Task<List<WalletBox>> ListUnspentScansAsync(int scanId, int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List boxes which are not spent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletBox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WalletBox>>> ListUnspentScansWithHttpInfoAsync(int scanId, int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register a scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanId</returns>
        System.Threading.Tasks.Task<ScanId> RegisterScanAsync(ScanRequest scanRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register a scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanId)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScanId>> RegisterScanWithHttpInfoAsync(ScanRequest scanRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop scan-related box tracking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdBoxId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanIdBoxId</returns>
        System.Threading.Tasks.Task<ScanIdBoxId> ScanStopTrackingAsync(ScanIdBoxId scanIdBoxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop scan-related box tracking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdBoxId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanIdBoxId)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScanIdBoxId>> ScanStopTrackingWithHttpInfoAsync(ScanIdBoxId scanIdBoxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScanApi : IScanApiSync, IScanApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScanApi : IScanApi
    {
        private ErgoNode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScanApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScanApi(string basePath)
        {
            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                new ErgoNode.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScanApi(ErgoNode.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScanApi(ErgoNode.Client.ISynchronousClient client, ErgoNode.Client.IAsynchronousClient asyncClient, ErgoNode.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ErgoNode.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ErgoNode.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ErgoNode.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ErgoNode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <returns>string</returns>
        public string AddBox(ScanIdsBox scanIdsBox)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = AddBoxWithHttpInfo(scanIdsBox);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> AddBoxWithHttpInfo(ScanIdsBox scanIdsBox)
        {
            // verify the required parameter 'scanIdsBox' is set
            if (scanIdsBox == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'scanIdsBox' when calling ScanApi->AddBox");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = scanIdsBox;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/scan/addBox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddBox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddBoxAsync(ScanIdsBox scanIdsBox, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await AddBoxWithHttpInfoAsync(scanIdsBox, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdsBox"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> AddBoxWithHttpInfoAsync(ScanIdsBox scanIdsBox, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scanIdsBox' is set
            if (scanIdsBox == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'scanIdsBox' when calling ScanApi->AddBox");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = scanIdsBox;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/scan/addBox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddBox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop tracking and deregister scan 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId"></param>
        /// <returns>ScanId</returns>
        public ScanId DeregisterScan(ScanId scanId)
        {
            ErgoNode.Client.ApiResponse<ScanId> localVarResponse = DeregisterScanWithHttpInfo(scanId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop tracking and deregister scan 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId"></param>
        /// <returns>ApiResponse of ScanId</returns>
        public ErgoNode.Client.ApiResponse<ScanId> DeregisterScanWithHttpInfo(ScanId scanId)
        {
            // verify the required parameter 'scanId' is set
            if (scanId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'scanId' when calling ScanApi->DeregisterScan");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = scanId;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScanId>("/scan/deregister", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeregisterScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop tracking and deregister scan 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanId</returns>
        public async System.Threading.Tasks.Task<ScanId> DeregisterScanAsync(ScanId scanId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<ScanId> localVarResponse = await DeregisterScanWithHttpInfoAsync(scanId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop tracking and deregister scan 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanId)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<ScanId>> DeregisterScanWithHttpInfoAsync(ScanId scanId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scanId' is set
            if (scanId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'scanId' when calling ScanApi->DeregisterScan");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = scanId;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ScanId>("/scan/deregister", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeregisterScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the registered scans 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Scan&gt;</returns>
        public List<Scan> ListAllScans()
        {
            ErgoNode.Client.ApiResponse<List<Scan>> localVarResponse = ListAllScansWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all the registered scans 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Scan&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<Scan>> ListAllScansWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Scan>>("/scan/listAll", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllScans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the registered scans 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Scan&gt;</returns>
        public async System.Threading.Tasks.Task<List<Scan>> ListAllScansAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<Scan>> localVarResponse = await ListAllScansWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all the registered scans 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Scan&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<Scan>>> ListAllScansWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Scan>>("/scan/listAll", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllScans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List boxes which are not spent. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>List&lt;WalletBox&gt;</returns>
        public List<WalletBox> ListUnspentScans(int scanId, int? minConfirmations = default(int?), int? minInclusionHeight = default(int?))
        {
            ErgoNode.Client.ApiResponse<List<WalletBox>> localVarResponse = ListUnspentScansWithHttpInfo(scanId, minConfirmations, minInclusionHeight);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List boxes which are not spent. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;WalletBox&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<WalletBox>> ListUnspentScansWithHttpInfo(int scanId, int? minConfirmations = default(int?), int? minInclusionHeight = default(int?))
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scanId", ErgoNode.Client.ClientUtils.ParameterToString(scanId)); // path parameter
            if (minConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minConfirmations", minConfirmations));
            }
            if (minInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minInclusionHeight", minInclusionHeight));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WalletBox>>("/scan/unspentBoxes/{scanId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnspentScans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List boxes which are not spent. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WalletBox&gt;</returns>
        public async System.Threading.Tasks.Task<List<WalletBox>> ListUnspentScansAsync(int scanId, int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<WalletBox>> localVarResponse = await ListUnspentScansWithHttpInfoAsync(scanId, minConfirmations, minInclusionHeight, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List boxes which are not spent. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanId">identifier of a scan</param>
        /// <param name="minConfirmations">Minimal number of confirmations (optional, default to 0)</param>
        /// <param name="minInclusionHeight">Minimal box inclusion height (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WalletBox&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<WalletBox>>> ListUnspentScansWithHttpInfoAsync(int scanId, int? minConfirmations = default(int?), int? minInclusionHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scanId", ErgoNode.Client.ClientUtils.ParameterToString(scanId)); // path parameter
            if (minConfirmations != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minConfirmations", minConfirmations));
            }
            if (minInclusionHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "minInclusionHeight", minInclusionHeight));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WalletBox>>("/scan/unspentBoxes/{scanId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUnspentScans", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a scan 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanRequest"></param>
        /// <returns>ScanId</returns>
        public ScanId RegisterScan(ScanRequest scanRequest)
        {
            ErgoNode.Client.ApiResponse<ScanId> localVarResponse = RegisterScanWithHttpInfo(scanRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a scan 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanRequest"></param>
        /// <returns>ApiResponse of ScanId</returns>
        public ErgoNode.Client.ApiResponse<ScanId> RegisterScanWithHttpInfo(ScanRequest scanRequest)
        {
            // verify the required parameter 'scanRequest' is set
            if (scanRequest == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'scanRequest' when calling ScanApi->RegisterScan");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = scanRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScanId>("/scan/register", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a scan 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanId</returns>
        public async System.Threading.Tasks.Task<ScanId> RegisterScanAsync(ScanRequest scanRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<ScanId> localVarResponse = await RegisterScanWithHttpInfoAsync(scanRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a scan 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanId)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<ScanId>> RegisterScanWithHttpInfoAsync(ScanRequest scanRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scanRequest' is set
            if (scanRequest == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'scanRequest' when calling ScanApi->RegisterScan");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = scanRequest;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ScanId>("/scan/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop scan-related box tracking 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdBoxId"></param>
        /// <returns>ScanIdBoxId</returns>
        public ScanIdBoxId ScanStopTracking(ScanIdBoxId scanIdBoxId)
        {
            ErgoNode.Client.ApiResponse<ScanIdBoxId> localVarResponse = ScanStopTrackingWithHttpInfo(scanIdBoxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop scan-related box tracking 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdBoxId"></param>
        /// <returns>ApiResponse of ScanIdBoxId</returns>
        public ErgoNode.Client.ApiResponse<ScanIdBoxId> ScanStopTrackingWithHttpInfo(ScanIdBoxId scanIdBoxId)
        {
            // verify the required parameter 'scanIdBoxId' is set
            if (scanIdBoxId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'scanIdBoxId' when calling ScanApi->ScanStopTracking");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = scanIdBoxId;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScanIdBoxId>("/scan/stopTracking", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanStopTracking", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop scan-related box tracking 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdBoxId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanIdBoxId</returns>
        public async System.Threading.Tasks.Task<ScanIdBoxId> ScanStopTrackingAsync(ScanIdBoxId scanIdBoxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<ScanIdBoxId> localVarResponse = await ScanStopTrackingWithHttpInfoAsync(scanIdBoxId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop scan-related box tracking 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanIdBoxId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanIdBoxId)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<ScanIdBoxId>> ScanStopTrackingWithHttpInfoAsync(ScanIdBoxId scanIdBoxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scanIdBoxId' is set
            if (scanIdBoxId == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'scanIdBoxId' when calling ScanApi->ScanStopTracking");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = scanIdBoxId;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ScanIdBoxId>("/scan/stopTracking", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanStopTracking", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
