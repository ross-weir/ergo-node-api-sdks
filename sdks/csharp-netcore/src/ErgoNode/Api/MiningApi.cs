/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ErgoNode.Client;
using ErgoNode.Model;

namespace ErgoNode.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiningApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Read miner reward address
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 MiningReadMinerRewardAddress();

        /// <summary>
        /// Read miner reward address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> MiningReadMinerRewardAddressWithHttpInfo();
        /// <summary>
        /// Read public key associated with miner rewards
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 MiningReadMinerRewardPubkey();

        /// <summary>
        /// Read public key associated with miner rewards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> MiningReadMinerRewardPubkeyWithHttpInfo();
        /// <summary>
        /// Request block candidate
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WorkMessage</returns>
        WorkMessage MiningRequestBlockCandidate();

        /// <summary>
        /// Request block candidate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WorkMessage</returns>
        ApiResponse<WorkMessage> MiningRequestBlockCandidateWithHttpInfo();
        /// <summary>
        /// Request block candidate
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>WorkMessage</returns>
        WorkMessage MiningRequestBlockCandidateWithMandatoryTransactions(List<ErgoTransaction> ergoTransaction);

        /// <summary>
        /// Request block candidate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>ApiResponse of WorkMessage</returns>
        ApiResponse<WorkMessage> MiningRequestBlockCandidateWithMandatoryTransactionsWithHttpInfo(List<ErgoTransaction> ergoTransaction);
        /// <summary>
        /// Submit solution for current candidate
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="powSolutions"></param>
        /// <returns></returns>
        void MiningSubmitSolution(PowSolutions powSolutions);

        /// <summary>
        /// Submit solution for current candidate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="powSolutions"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MiningSubmitSolutionWithHttpInfo(PowSolutions powSolutions);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiningApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Read miner reward address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> MiningReadMinerRewardAddressAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read miner reward address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> MiningReadMinerRewardAddressWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read public key associated with miner rewards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> MiningReadMinerRewardPubkeyAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read public key associated with miner rewards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> MiningReadMinerRewardPubkeyWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request block candidate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkMessage</returns>
        System.Threading.Tasks.Task<WorkMessage> MiningRequestBlockCandidateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request block candidate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkMessage>> MiningRequestBlockCandidateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request block candidate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkMessage</returns>
        System.Threading.Tasks.Task<WorkMessage> MiningRequestBlockCandidateWithMandatoryTransactionsAsync(List<ErgoTransaction> ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request block candidate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkMessage>> MiningRequestBlockCandidateWithMandatoryTransactionsWithHttpInfoAsync(List<ErgoTransaction> ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit solution for current candidate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="powSolutions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MiningSubmitSolutionAsync(PowSolutions powSolutions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit solution for current candidate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="powSolutions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MiningSubmitSolutionWithHttpInfoAsync(PowSolutions powSolutions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiningApi : IMiningApiSync, IMiningApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MiningApi : IMiningApi
    {
        private ErgoNode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MiningApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MiningApi(string basePath)
        {
            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                new ErgoNode.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MiningApi(ErgoNode.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MiningApi(ErgoNode.Client.ISynchronousClient client, ErgoNode.Client.IAsynchronousClient asyncClient, ErgoNode.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ErgoNode.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ErgoNode.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ErgoNode.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ErgoNode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Read miner reward address 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 MiningReadMinerRewardAddress()
        {
            ErgoNode.Client.ApiResponse<InlineResponse2005> localVarResponse = MiningReadMinerRewardAddressWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read miner reward address 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ErgoNode.Client.ApiResponse<InlineResponse2005> MiningReadMinerRewardAddressWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2005>("/mining/rewardAddress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MiningReadMinerRewardAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read miner reward address 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> MiningReadMinerRewardAddressAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<InlineResponse2005> localVarResponse = await MiningReadMinerRewardAddressWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read miner reward address 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<InlineResponse2005>> MiningReadMinerRewardAddressWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/mining/rewardAddress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MiningReadMinerRewardAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read public key associated with miner rewards 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 MiningReadMinerRewardPubkey()
        {
            ErgoNode.Client.ApiResponse<InlineResponse2006> localVarResponse = MiningReadMinerRewardPubkeyWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read public key associated with miner rewards 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ErgoNode.Client.ApiResponse<InlineResponse2006> MiningReadMinerRewardPubkeyWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2006>("/mining/rewardPublicKey", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MiningReadMinerRewardPubkey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read public key associated with miner rewards 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> MiningReadMinerRewardPubkeyAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<InlineResponse2006> localVarResponse = await MiningReadMinerRewardPubkeyWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read public key associated with miner rewards 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<InlineResponse2006>> MiningReadMinerRewardPubkeyWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/mining/rewardPublicKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MiningReadMinerRewardPubkey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request block candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WorkMessage</returns>
        public WorkMessage MiningRequestBlockCandidate()
        {
            ErgoNode.Client.ApiResponse<WorkMessage> localVarResponse = MiningRequestBlockCandidateWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request block candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WorkMessage</returns>
        public ErgoNode.Client.ApiResponse<WorkMessage> MiningRequestBlockCandidateWithHttpInfo()
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkMessage>("/mining/candidate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MiningRequestBlockCandidate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request block candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkMessage</returns>
        public async System.Threading.Tasks.Task<WorkMessage> MiningRequestBlockCandidateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<WorkMessage> localVarResponse = await MiningRequestBlockCandidateWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request block candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkMessage)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<WorkMessage>> MiningRequestBlockCandidateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkMessage>("/mining/candidate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MiningRequestBlockCandidate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request block candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>WorkMessage</returns>
        public WorkMessage MiningRequestBlockCandidateWithMandatoryTransactions(List<ErgoTransaction> ergoTransaction)
        {
            ErgoNode.Client.ApiResponse<WorkMessage> localVarResponse = MiningRequestBlockCandidateWithMandatoryTransactionsWithHttpInfo(ergoTransaction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request block candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>ApiResponse of WorkMessage</returns>
        public ErgoNode.Client.ApiResponse<WorkMessage> MiningRequestBlockCandidateWithMandatoryTransactionsWithHttpInfo(List<ErgoTransaction> ergoTransaction)
        {
            // verify the required parameter 'ergoTransaction' is set
            if (ergoTransaction == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'ergoTransaction' when calling MiningApi->MiningRequestBlockCandidateWithMandatoryTransactions");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ergoTransaction;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkMessage>("/mining/candidateWithTxs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MiningRequestBlockCandidateWithMandatoryTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request block candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkMessage</returns>
        public async System.Threading.Tasks.Task<WorkMessage> MiningRequestBlockCandidateWithMandatoryTransactionsAsync(List<ErgoTransaction> ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<WorkMessage> localVarResponse = await MiningRequestBlockCandidateWithMandatoryTransactionsWithHttpInfoAsync(ergoTransaction, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request block candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkMessage)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<WorkMessage>> MiningRequestBlockCandidateWithMandatoryTransactionsWithHttpInfoAsync(List<ErgoTransaction> ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ergoTransaction' is set
            if (ergoTransaction == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'ergoTransaction' when calling MiningApi->MiningRequestBlockCandidateWithMandatoryTransactions");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ergoTransaction;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkMessage>("/mining/candidateWithTxs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MiningRequestBlockCandidateWithMandatoryTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit solution for current candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="powSolutions"></param>
        /// <returns></returns>
        public void MiningSubmitSolution(PowSolutions powSolutions)
        {
            MiningSubmitSolutionWithHttpInfo(powSolutions);
        }

        /// <summary>
        /// Submit solution for current candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="powSolutions"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ErgoNode.Client.ApiResponse<Object> MiningSubmitSolutionWithHttpInfo(PowSolutions powSolutions)
        {
            // verify the required parameter 'powSolutions' is set
            if (powSolutions == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'powSolutions' when calling MiningApi->MiningSubmitSolution");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = powSolutions;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mining/solution", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MiningSubmitSolution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit solution for current candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="powSolutions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MiningSubmitSolutionAsync(PowSolutions powSolutions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MiningSubmitSolutionWithHttpInfoAsync(powSolutions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Submit solution for current candidate 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="powSolutions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<Object>> MiningSubmitSolutionWithHttpInfoAsync(PowSolutions powSolutions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'powSolutions' is set
            if (powSolutions == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'powSolutions' when calling MiningApi->MiningSubmitSolution");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = powSolutions;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mining/solution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MiningSubmitSolution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
