/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ErgoNode.Client;
using ErgoNode.Model;

namespace ErgoNode.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>string</returns>
        string CheckTransaction(ErgoTransaction ergoTransaction);

        /// <summary>
        /// Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CheckTransactionWithHttpInfo(ErgoTransaction ergoTransaction);
        /// <summary>
        /// Get expected wait time for the transaction with specified fee and size
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fee">Transaction fee (in nanoErgs)</param>
        /// <param name="txSize">Transaction size</param>
        /// <returns>int</returns>
        int GetExpectedWaitTime(int fee, int txSize);

        /// <summary>
        /// Get expected wait time for the transaction with specified fee and size
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fee">Transaction fee (in nanoErgs)</param>
        /// <param name="txSize">Transaction size</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> GetExpectedWaitTimeWithHttpInfo(int fee, int txSize);
        /// <summary>
        /// Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool. It contains \&quot;bins\&quot;+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins), and last bin corresponds to the transactions with wait time &gt;&#x3D; maxtime.
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bins">The number of bins in histogram (optional, default to 10)</param>
        /// <param name="maxtime">Maximal wait time in milliseconds (optional, default to 60000)</param>
        /// <returns>List&lt;FeeHistogramBin&gt;</returns>
        List<FeeHistogramBin> GetFeeHistogram(int? bins = default(int?), long? maxtime = default(long?));

        /// <summary>
        /// Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool. It contains \&quot;bins\&quot;+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins), and last bin corresponds to the transactions with wait time &gt;&#x3D; maxtime.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bins">The number of bins in histogram (optional, default to 10)</param>
        /// <param name="maxtime">Maximal wait time in milliseconds (optional, default to 60000)</param>
        /// <returns>ApiResponse of List&lt;FeeHistogramBin&gt;</returns>
        ApiResponse<List<FeeHistogramBin>> GetFeeHistogramWithHttpInfo(int? bins = default(int?), long? maxtime = default(long?));
        /// <summary>
        /// Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes)
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitTime">Maximum transaction wait time in minutes</param>
        /// <param name="txSize">Transaction size</param>
        /// <returns>int</returns>
        int GetRecommendedFee(int waitTime, int txSize);

        /// <summary>
        /// Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitTime">Maximum transaction wait time in minutes</param>
        /// <param name="txSize">Transaction size</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> GetRecommendedFeeWithHttpInfo(int waitTime, int txSize);
        /// <summary>
        /// Get current pool of the unconfirmed transactions pool
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <returns>List&lt;ErgoTransaction&gt;</returns>
        List<ErgoTransaction> GetUnconfirmedTransactions(int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Get current pool of the unconfirmed transactions pool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;ErgoTransaction&gt;</returns>
        ApiResponse<List<ErgoTransaction>> GetUnconfirmedTransactionsWithHttpInfo(int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Submit an Ergo transaction to unconfirmed pool to send it over the network
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>string</returns>
        string SendTransaction(ErgoTransaction ergoTransaction);

        /// <summary>
        /// Submit an Ergo transaction to unconfirmed pool to send it over the network
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SendTransactionWithHttpInfo(ErgoTransaction ergoTransaction);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CheckTransactionAsync(ErgoTransaction ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CheckTransactionWithHttpInfoAsync(ErgoTransaction ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get expected wait time for the transaction with specified fee and size
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fee">Transaction fee (in nanoErgs)</param>
        /// <param name="txSize">Transaction size</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> GetExpectedWaitTimeAsync(int fee, int txSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get expected wait time for the transaction with specified fee and size
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fee">Transaction fee (in nanoErgs)</param>
        /// <param name="txSize">Transaction size</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> GetExpectedWaitTimeWithHttpInfoAsync(int fee, int txSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool. It contains \&quot;bins\&quot;+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins), and last bin corresponds to the transactions with wait time &gt;&#x3D; maxtime.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bins">The number of bins in histogram (optional, default to 10)</param>
        /// <param name="maxtime">Maximal wait time in milliseconds (optional, default to 60000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FeeHistogramBin&gt;</returns>
        System.Threading.Tasks.Task<List<FeeHistogramBin>> GetFeeHistogramAsync(int? bins = default(int?), long? maxtime = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool. It contains \&quot;bins\&quot;+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins), and last bin corresponds to the transactions with wait time &gt;&#x3D; maxtime.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bins">The number of bins in histogram (optional, default to 10)</param>
        /// <param name="maxtime">Maximal wait time in milliseconds (optional, default to 60000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FeeHistogramBin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeeHistogramBin>>> GetFeeHistogramWithHttpInfoAsync(int? bins = default(int?), long? maxtime = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitTime">Maximum transaction wait time in minutes</param>
        /// <param name="txSize">Transaction size</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> GetRecommendedFeeAsync(int waitTime, int txSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitTime">Maximum transaction wait time in minutes</param>
        /// <param name="txSize">Transaction size</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> GetRecommendedFeeWithHttpInfoAsync(int waitTime, int txSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get current pool of the unconfirmed transactions pool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ErgoTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<ErgoTransaction>> GetUnconfirmedTransactionsAsync(int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get current pool of the unconfirmed transactions pool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ErgoTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ErgoTransaction>>> GetUnconfirmedTransactionsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit an Ergo transaction to unconfirmed pool to send it over the network
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SendTransactionAsync(ErgoTransaction ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit an Ergo transaction to unconfirmed pool to send it over the network
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SendTransactionWithHttpInfoAsync(ErgoTransaction ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApi : ITransactionsApiSync, ITransactionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionsApi : ITransactionsApi
    {
        private ErgoNode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi(string basePath)
        {
            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                new ErgoNode.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionsApi(ErgoNode.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ErgoNode.Client.Configuration.MergeConfigurations(
                ErgoNode.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErgoNode.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransactionsApi(ErgoNode.Client.ISynchronousClient client, ErgoNode.Client.IAsynchronousClient asyncClient, ErgoNode.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ErgoNode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ErgoNode.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ErgoNode.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ErgoNode.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ErgoNode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>string</returns>
        public string CheckTransaction(ErgoTransaction ergoTransaction)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = CheckTransactionWithHttpInfo(ergoTransaction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> CheckTransactionWithHttpInfo(ErgoTransaction ergoTransaction)
        {
            // verify the required parameter 'ergoTransaction' is set
            if (ergoTransaction == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'ergoTransaction' when calling TransactionsApi->CheckTransaction");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ergoTransaction;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/transactions/check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CheckTransactionAsync(ErgoTransaction ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await CheckTransactionWithHttpInfoAsync(ergoTransaction, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> CheckTransactionWithHttpInfoAsync(ErgoTransaction ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ergoTransaction' is set
            if (ergoTransaction == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'ergoTransaction' when calling TransactionsApi->CheckTransaction");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ergoTransaction;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/transactions/check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get expected wait time for the transaction with specified fee and size 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fee">Transaction fee (in nanoErgs)</param>
        /// <param name="txSize">Transaction size</param>
        /// <returns>int</returns>
        public int GetExpectedWaitTime(int fee, int txSize)
        {
            ErgoNode.Client.ApiResponse<int> localVarResponse = GetExpectedWaitTimeWithHttpInfo(fee, txSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get expected wait time for the transaction with specified fee and size 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fee">Transaction fee (in nanoErgs)</param>
        /// <param name="txSize">Transaction size</param>
        /// <returns>ApiResponse of int</returns>
        public ErgoNode.Client.ApiResponse<int> GetExpectedWaitTimeWithHttpInfo(int fee, int txSize)
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "fee", fee));
            localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "txSize", txSize));


            // make the HTTP request
            var localVarResponse = this.Client.Get<int>("/transactions/waitTime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpectedWaitTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get expected wait time for the transaction with specified fee and size 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fee">Transaction fee (in nanoErgs)</param>
        /// <param name="txSize">Transaction size</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> GetExpectedWaitTimeAsync(int fee, int txSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<int> localVarResponse = await GetExpectedWaitTimeWithHttpInfoAsync(fee, txSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get expected wait time for the transaction with specified fee and size 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fee">Transaction fee (in nanoErgs)</param>
        /// <param name="txSize">Transaction size</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<int>> GetExpectedWaitTimeWithHttpInfoAsync(int fee, int txSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "fee", fee));
            localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "txSize", txSize));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<int>("/transactions/waitTime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpectedWaitTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool. It contains \&quot;bins\&quot;+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins), and last bin corresponds to the transactions with wait time &gt;&#x3D; maxtime. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bins">The number of bins in histogram (optional, default to 10)</param>
        /// <param name="maxtime">Maximal wait time in milliseconds (optional, default to 60000)</param>
        /// <returns>List&lt;FeeHistogramBin&gt;</returns>
        public List<FeeHistogramBin> GetFeeHistogram(int? bins = default(int?), long? maxtime = default(long?))
        {
            ErgoNode.Client.ApiResponse<List<FeeHistogramBin>> localVarResponse = GetFeeHistogramWithHttpInfo(bins, maxtime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool. It contains \&quot;bins\&quot;+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins), and last bin corresponds to the transactions with wait time &gt;&#x3D; maxtime. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bins">The number of bins in histogram (optional, default to 10)</param>
        /// <param name="maxtime">Maximal wait time in milliseconds (optional, default to 60000)</param>
        /// <returns>ApiResponse of List&lt;FeeHistogramBin&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<FeeHistogramBin>> GetFeeHistogramWithHttpInfo(int? bins = default(int?), long? maxtime = default(long?))
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (bins != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "bins", bins));
            }
            if (maxtime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "maxtime", maxtime));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FeeHistogramBin>>("/transactions/poolHistogram", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeeHistogram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool. It contains \&quot;bins\&quot;+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins), and last bin corresponds to the transactions with wait time &gt;&#x3D; maxtime. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bins">The number of bins in histogram (optional, default to 10)</param>
        /// <param name="maxtime">Maximal wait time in milliseconds (optional, default to 60000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FeeHistogramBin&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeeHistogramBin>> GetFeeHistogramAsync(int? bins = default(int?), long? maxtime = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<FeeHistogramBin>> localVarResponse = await GetFeeHistogramWithHttpInfoAsync(bins, maxtime, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool. It contains \&quot;bins\&quot;+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins), and last bin corresponds to the transactions with wait time &gt;&#x3D; maxtime. 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bins">The number of bins in histogram (optional, default to 10)</param>
        /// <param name="maxtime">Maximal wait time in milliseconds (optional, default to 60000)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FeeHistogramBin&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<FeeHistogramBin>>> GetFeeHistogramWithHttpInfoAsync(int? bins = default(int?), long? maxtime = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (bins != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "bins", bins));
            }
            if (maxtime != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "maxtime", maxtime));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FeeHistogramBin>>("/transactions/poolHistogram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeeHistogram", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitTime">Maximum transaction wait time in minutes</param>
        /// <param name="txSize">Transaction size</param>
        /// <returns>int</returns>
        public int GetRecommendedFee(int waitTime, int txSize)
        {
            ErgoNode.Client.ApiResponse<int> localVarResponse = GetRecommendedFeeWithHttpInfo(waitTime, txSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitTime">Maximum transaction wait time in minutes</param>
        /// <param name="txSize">Transaction size</param>
        /// <returns>ApiResponse of int</returns>
        public ErgoNode.Client.ApiResponse<int> GetRecommendedFeeWithHttpInfo(int waitTime, int txSize)
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "waitTime", waitTime));
            localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "txSize", txSize));


            // make the HTTP request
            var localVarResponse = this.Client.Get<int>("/transactions/getFee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendedFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitTime">Maximum transaction wait time in minutes</param>
        /// <param name="txSize">Transaction size</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> GetRecommendedFeeAsync(int waitTime, int txSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<int> localVarResponse = await GetRecommendedFeeWithHttpInfoAsync(waitTime, txSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes) 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitTime">Maximum transaction wait time in minutes</param>
        /// <param name="txSize">Transaction size</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<int>> GetRecommendedFeeWithHttpInfoAsync(int waitTime, int txSize, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "waitTime", waitTime));
            localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "txSize", txSize));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<int>("/transactions/getFee", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendedFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current pool of the unconfirmed transactions pool 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <returns>List&lt;ErgoTransaction&gt;</returns>
        public List<ErgoTransaction> GetUnconfirmedTransactions(int? limit = default(int?), int? offset = default(int?))
        {
            ErgoNode.Client.ApiResponse<List<ErgoTransaction>> localVarResponse = GetUnconfirmedTransactionsWithHttpInfo(limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current pool of the unconfirmed transactions pool 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;ErgoTransaction&gt;</returns>
        public ErgoNode.Client.ApiResponse<List<ErgoTransaction>> GetUnconfirmedTransactionsWithHttpInfo(int? limit = default(int?), int? offset = default(int?))
        {
            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ErgoTransaction>>("/transactions/unconfirmed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnconfirmedTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current pool of the unconfirmed transactions pool 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ErgoTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<ErgoTransaction>> GetUnconfirmedTransactionsAsync(int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<List<ErgoTransaction>> localVarResponse = await GetUnconfirmedTransactionsWithHttpInfoAsync(limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current pool of the unconfirmed transactions pool 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items in list to return (optional, default to 50)</param>
        /// <param name="offset">The number of items in list to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ErgoTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<List<ErgoTransaction>>> GetUnconfirmedTransactionsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ErgoNode.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ErgoTransaction>>("/transactions/unconfirmed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnconfirmedTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit an Ergo transaction to unconfirmed pool to send it over the network 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>string</returns>
        public string SendTransaction(ErgoTransaction ergoTransaction)
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = SendTransactionWithHttpInfo(ergoTransaction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit an Ergo transaction to unconfirmed pool to send it over the network 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <returns>ApiResponse of string</returns>
        public ErgoNode.Client.ApiResponse<string> SendTransactionWithHttpInfo(ErgoTransaction ergoTransaction)
        {
            // verify the required parameter 'ergoTransaction' is set
            if (ergoTransaction == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'ergoTransaction' when calling TransactionsApi->SendTransaction");

            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ergoTransaction;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit an Ergo transaction to unconfirmed pool to send it over the network 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SendTransactionAsync(ErgoTransaction ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErgoNode.Client.ApiResponse<string> localVarResponse = await SendTransactionWithHttpInfoAsync(ergoTransaction, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit an Ergo transaction to unconfirmed pool to send it over the network 
        /// </summary>
        /// <exception cref="ErgoNode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ergoTransaction"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ErgoNode.Client.ApiResponse<string>> SendTransactionWithHttpInfoAsync(ErgoTransaction ergoTransaction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ergoTransaction' is set
            if (ergoTransaction == null)
                throw new ErgoNode.Client.ApiException(400, "Missing required parameter 'ergoTransaction' when calling TransactionsApi->SendTransaction");


            ErgoNode.Client.RequestOptions localVarRequestOptions = new ErgoNode.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ErgoNode.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErgoNode.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ergoTransaction;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTransaction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
