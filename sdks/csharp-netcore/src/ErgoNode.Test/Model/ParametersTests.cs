/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ErgoNode.Api;
using ErgoNode.Model;
using ErgoNode.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace ErgoNode.Test.Model
{
    /// <summary>
    ///  Class for testing Parameters
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ParametersTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Parameters
        //private Parameters instance;

        public ParametersTests()
        {
            // TODO uncomment below to create an instance of Parameters
            //instance = new Parameters();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Parameters
        /// </summary>
        [Fact]
        public void ParametersInstanceTest()
        {
            // TODO uncomment below to test "IsType" Parameters
            //Assert.IsType<Parameters>(instance);
        }


        /// <summary>
        /// Test the property 'Height'
        /// </summary>
        [Fact]
        public void HeightTest()
        {
            // TODO unit test for the property 'Height'
        }
        /// <summary>
        /// Test the property 'StorageFeeFactor'
        /// </summary>
        [Fact]
        public void StorageFeeFactorTest()
        {
            // TODO unit test for the property 'StorageFeeFactor'
        }
        /// <summary>
        /// Test the property 'MinValuePerByte'
        /// </summary>
        [Fact]
        public void MinValuePerByteTest()
        {
            // TODO unit test for the property 'MinValuePerByte'
        }
        /// <summary>
        /// Test the property 'MaxBlockSize'
        /// </summary>
        [Fact]
        public void MaxBlockSizeTest()
        {
            // TODO unit test for the property 'MaxBlockSize'
        }
        /// <summary>
        /// Test the property 'MaxBlockCost'
        /// </summary>
        [Fact]
        public void MaxBlockCostTest()
        {
            // TODO unit test for the property 'MaxBlockCost'
        }
        /// <summary>
        /// Test the property 'BlockVersion'
        /// </summary>
        [Fact]
        public void BlockVersionTest()
        {
            // TODO unit test for the property 'BlockVersion'
        }
        /// <summary>
        /// Test the property 'TokenAccessCost'
        /// </summary>
        [Fact]
        public void TokenAccessCostTest()
        {
            // TODO unit test for the property 'TokenAccessCost'
        }
        /// <summary>
        /// Test the property 'InputCost'
        /// </summary>
        [Fact]
        public void InputCostTest()
        {
            // TODO unit test for the property 'InputCost'
        }
        /// <summary>
        /// Test the property 'DataInputCost'
        /// </summary>
        [Fact]
        public void DataInputCostTest()
        {
            // TODO unit test for the property 'DataInputCost'
        }
        /// <summary>
        /// Test the property 'OutputCost'
        /// </summary>
        [Fact]
        public void OutputCostTest()
        {
            // TODO unit test for the property 'OutputCost'
        }

    }

}
