/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 4.0.15
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ErgoNode.Client;
using ErgoNode.Api;
// uncomment below to import models
//using ErgoNode.Model;

namespace ErgoNode.Test.Api
{
    /// <summary>
    ///  Class for testing WalletApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WalletApiTests : IDisposable
    {
        private WalletApi instance;

        public WalletApiTests()
        {
            instance = new WalletApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WalletApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WalletApi
            //Assert.IsType<WalletApi>(instance);
        }

        /// <summary>
        /// Test AddBox
        /// </summary>
        [Fact]
        public void AddBoxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ScanIdsBox scanIdsBox = null;
            //var response = instance.AddBox(scanIdsBox);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test CheckSeed
        /// </summary>
        [Fact]
        public void CheckSeedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject2 inlineObject2 = null;
            //var response = instance.CheckSeed(inlineObject2);
            //Assert.IsType<InlineResponse2001>(response);
        }

        /// <summary>
        /// Test ExtractHints
        /// </summary>
        [Fact]
        public void ExtractHintsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HintExtractionRequest hintExtractionRequest = null;
            //var response = instance.ExtractHints(hintExtractionRequest);
            //Assert.IsType<TransactionHintsBag>(response);
        }

        /// <summary>
        /// Test GenerateCommitments
        /// </summary>
        [Fact]
        public void GenerateCommitmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GenerateCommitmentsRequest generateCommitmentsRequest = null;
            //var response = instance.GenerateCommitments(generateCommitmentsRequest);
            //Assert.IsType<TransactionHintsBag>(response);
        }

        /// <summary>
        /// Test GetWalletStatus
        /// </summary>
        [Fact]
        public void GetWalletStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWalletStatus();
            //Assert.IsType<InlineResponse2002>(response);
        }

        /// <summary>
        /// Test WalletAddresses
        /// </summary>
        [Fact]
        public void WalletAddressesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WalletAddresses();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test WalletBalances
        /// </summary>
        [Fact]
        public void WalletBalancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WalletBalances();
            //Assert.IsType<BalancesSnapshot>(response);
        }

        /// <summary>
        /// Test WalletBalancesUnconfirmed
        /// </summary>
        [Fact]
        public void WalletBalancesUnconfirmedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WalletBalancesUnconfirmed();
            //Assert.IsType<BalancesSnapshot>(response);
        }

        /// <summary>
        /// Test WalletBoxes
        /// </summary>
        [Fact]
        public void WalletBoxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? minConfirmations = null;
            //int? minInclusionHeight = null;
            //var response = instance.WalletBoxes(minConfirmations, minInclusionHeight);
            //Assert.IsType<List<WalletBox>>(response);
        }

        /// <summary>
        /// Test WalletBoxesCollect
        /// </summary>
        [Fact]
        public void WalletBoxesCollectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BoxesRequestHolder boxesRequestHolder = null;
            //var response = instance.WalletBoxesCollect(boxesRequestHolder);
            //Assert.IsType<List<WalletBox>>(response);
        }

        /// <summary>
        /// Test WalletDeriveKey
        /// </summary>
        [Fact]
        public void WalletDeriveKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject5 inlineObject5 = null;
            //var response = instance.WalletDeriveKey(inlineObject5);
            //Assert.IsType<InlineResponse2003>(response);
        }

        /// <summary>
        /// Test WalletDeriveNextKey
        /// </summary>
        [Fact]
        public void WalletDeriveNextKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WalletDeriveNextKey();
            //Assert.IsType<InlineResponse2004>(response);
        }

        /// <summary>
        /// Test WalletGetTransaction
        /// </summary>
        [Fact]
        public void WalletGetTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.WalletGetTransaction(id);
            //Assert.IsType<List<WalletTransaction>>(response);
        }

        /// <summary>
        /// Test WalletInit
        /// </summary>
        [Fact]
        public void WalletInitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject inlineObject = null;
            //var response = instance.WalletInit(inlineObject);
            //Assert.IsType<InlineResponse200>(response);
        }

        /// <summary>
        /// Test WalletLock
        /// </summary>
        [Fact]
        public void WalletLockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.WalletLock();
        }

        /// <summary>
        /// Test WalletPaymentTransactionGenerateAndSend
        /// </summary>
        [Fact]
        public void WalletPaymentTransactionGenerateAndSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<PaymentRequest> paymentRequest = null;
            //var response = instance.WalletPaymentTransactionGenerateAndSend(paymentRequest);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test WalletRescan
        /// </summary>
        [Fact]
        public void WalletRescanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.WalletRescan();
        }

        /// <summary>
        /// Test WalletRestore
        /// </summary>
        [Fact]
        public void WalletRestoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject1 inlineObject1 = null;
            //instance.WalletRestore(inlineObject1);
        }

        /// <summary>
        /// Test WalletTransactionGenerate
        /// </summary>
        [Fact]
        public void WalletTransactionGenerateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestsHolder requestsHolder = null;
            //var response = instance.WalletTransactionGenerate(requestsHolder);
            //Assert.IsType<ErgoTransaction>(response);
        }

        /// <summary>
        /// Test WalletTransactionGenerateAndSend
        /// </summary>
        [Fact]
        public void WalletTransactionGenerateAndSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestsHolder requestsHolder = null;
            //var response = instance.WalletTransactionGenerateAndSend(requestsHolder);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test WalletTransactionSign
        /// </summary>
        [Fact]
        public void WalletTransactionSignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionSigningRequest transactionSigningRequest = null;
            //var response = instance.WalletTransactionSign(transactionSigningRequest);
            //Assert.IsType<ErgoTransaction>(response);
        }

        /// <summary>
        /// Test WalletTransactions
        /// </summary>
        [Fact]
        public void WalletTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? minInclusionHeight = null;
            //int? maxInclusionHeight = null;
            //int? minConfirmations = null;
            //int? maxConfirmations = null;
            //var response = instance.WalletTransactions(minInclusionHeight, maxInclusionHeight, minConfirmations, maxConfirmations);
            //Assert.IsType<List<WalletTransaction>>(response);
        }

        /// <summary>
        /// Test WalletTransactionsByScanId
        /// </summary>
        [Fact]
        public void WalletTransactionsByScanIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int scanId = null;
            //int? minInclusionHeight = null;
            //int? maxInclusionHeight = null;
            //int? minConfirmations = null;
            //int? maxConfirmations = null;
            //var response = instance.WalletTransactionsByScanId(scanId, minInclusionHeight, maxInclusionHeight, minConfirmations, maxConfirmations);
            //Assert.IsType<List<WalletTransaction>>(response);
        }

        /// <summary>
        /// Test WalletUnlock
        /// </summary>
        [Fact]
        public void WalletUnlockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject3 inlineObject3 = null;
            //instance.WalletUnlock(inlineObject3);
        }

        /// <summary>
        /// Test WalletUnsignedTransactionGenerate
        /// </summary>
        [Fact]
        public void WalletUnsignedTransactionGenerateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestsHolder requestsHolder = null;
            //var response = instance.WalletUnsignedTransactionGenerate(requestsHolder);
            //Assert.IsType<UnsignedErgoTransaction>(response);
        }

        /// <summary>
        /// Test WalletUnspentBoxes
        /// </summary>
        [Fact]
        public void WalletUnspentBoxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? minConfirmations = null;
            //int? minInclusionHeight = null;
            //var response = instance.WalletUnspentBoxes(minConfirmations, minInclusionHeight);
            //Assert.IsType<List<WalletBox>>(response);
        }

        /// <summary>
        /// Test WalletUpdateChangeAddress
        /// </summary>
        [Fact]
        public void WalletUpdateChangeAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject4 inlineObject4 = null;
            //instance.WalletUpdateChangeAddress(inlineObject4);
        }
    }
}
